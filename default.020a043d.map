{"version":3,"sources":["node_modules/run-with-fps/index.js","metaballs/common/gradientDrawer.js","metaballs/common/utils.js","metaballs/common/metaballs.js","metaballs/common/metaballsDrawer.js","metaballs/common/gridUI.js","metaballs/default/circles.js","metaballs/default/index.js"],"names":["createGradientDrawer","circles","gradCanvas","document","createElement","gradCtx","getContext","width","height","forEach","circle","globalCompositeOperation","grad","createRadialGradient","x","y","radius","addColorStop","color","join","fillStyle","fillRect","random","a","b","Math","dist","x1","y1","hypot","distFast","x2","y2","min","abs","max","lerp","b_w","d_w","by","dy","cornersByIndex","i","toString","padStart","square_types","Array","from","_","n","split","map","Number","interpolateLines","lines","cornerWeights","line","length","calcCirclesWeight","reduce","sum","pow","cornersIsEq","c1","c2","cornersSign","cornersArr","findIndex","bind","cornersMap","getSquareLines","weights","corners","createMetaballsDrawer","grid","ballsCanvas","ballsCtx","visited","padding","fromI","floor","size","fromJ","toI","cols","toJ","j","index","cx","cy","drawLines","strokeStyle","beginPath","moveTo","l","lineTo","fill","initGridUI","gridSizeInput","getElementById","gridVisInput","gridSizeValue","visible","checked","updateGridSize","input","value","innerText","addEventListener","e","target","drawGrid","ctx","lineWidth","rows","rect","stroke","orbitalUpdater","t","Date","now","oradius","sin","cos","ox","oy","vx","vy","createCircles","window","innerWidth","innerHeight","canvas","gradientDrawer","metaballsDrawer","draw","drawImage","drawCircles","arc"],"mappings":"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","file":"default.020a043d.map","sourceRoot":"..","sourcesContent":["module.exports = function runWithFPS (fn, fps) {\n  var interval = 1000 / fps;\n  var then = Date.now();\n  var stopped = false;\n\n  function run() {\n    if (!stopped) {\n      requestAnimationFrame(run);\n    }\n\n    var now = Date.now();\n    var delta = now - then;\n\n    if (delta > interval && !stopped) {\n      then = now - (delta % interval);\n      fn(now);\n    }\n  };\n\n  requestAnimationFrame(run);\n  fn(Date.now());\n\n  return function() {\n    stopped = true;\n  }\n};","export function createGradientDrawer(circles) {\n  const gradCanvas = document.createElement('canvas');\n  const gradCtx = gradCanvas.getContext('2d');\n\n  return (width, height) => {\n    gradCanvas.width = width;\n    gradCanvas.height = height;\n    circles.forEach(circle => {\n      gradCtx.globalCompositeOperation = 'source-over';\n      const grad = gradCtx.createRadialGradient(\n        circle.x,\n        circle.y,\n        circle.radius * 0,\n        circle.x,\n        circle.y,\n        circle.radius * 2.5\n      );\n      grad.addColorStop(0, `rgba(${circle.color.join(', ')}, 1)`);\n      grad.addColorStop(1, `rgba(${circle.color.join(', ')}, 0)`);\n      gradCtx.fillStyle = grad;\n      gradCtx.fillRect(\n        circle.x - circle.radius * 2.5,\n        circle.y - circle.radius * 2.5,\n        circle.radius * 5,\n        circle.radius * 5\n      );\n      gradCtx.fillRect(\n        circle.x - circle.radius * 2.5,\n        circle.y - circle.radius * 2.5,\n        circle.radius * 5,\n        circle.radius * 5\n      );\n    });\n\n    return gradCanvas;\n  };\n}\n","export function random(a, b) {\n  return (b - a) * Math.random() + a;\n}\n\nexport function dist(x, y, x1, y1) {\n  return Math.hypot(x - x1, y - y1);\n}\n\nexport function distFast(x1, y1, x2, y2) {\n  // Approximation by using octagons approach\n  const x = x2 - x1;\n  const y = y2 - y1;\n  return (\n    1.426776695 *\n    Math.min(\n      0.7071067812 * (Math.abs(x) + Math.abs(y)),\n      Math.max(Math.abs(x), Math.abs(y))\n    )\n  );\n}\n\n// Linear interpolation\nexport function lerp(b_w, d_w, by = 0, dy = 1) {\n  if (b_w === d_w) {\n    return null;\n  }\n\n  return by + ((dy - by) * (1 - b_w)) / (d_w - b_w);\n}\n","import { lerp } from './utils';\n\nexport const cornersByIndex = i =>\n  (i >>> 0).toString(2).padStart(4, '0');\nconst square_types = Array.from(new Array(16), (_, n) =>\n  cornersByIndex(n)\n    .split('')\n    .map(Number)\n);\n\nexport function interpolateLines(lines, cornerWeights) {\n  // return lines;\n  return lines.map(line => {\n    for (let i = 0; i < line.length; i += 2) {\n      const x = line[i];\n      const y = line[i + 1];\n\n      if ((x === 0 || x === 1) && (y === 0 || y === 1)) {\n        // it's corner\n        continue;\n      }\n\n      if (x === 0 || x === 1) {\n        line[i + 1] = lerp(\n          ...(x === 0\n            ? [cornerWeights[0], cornerWeights[3]]\n            : [cornerWeights[1], cornerWeights[2]])\n        );\n      }\n\n      if (y === 0 || y === 1) {\n        line[i] = lerp(\n          ...(y === 0\n            ? [cornerWeights[0], cornerWeights[1]]\n            : [cornerWeights[3], cornerWeights[2]])\n        );\n      }\n    }\n    return line;\n  });\n}\n\nexport function calcCirclesWeight(circles, x, y) {\n  return circles.reduce((sum, circle) => {\n    return (\n      sum +\n      Math.pow(circle.radius, 2) /\n        (Math.pow(circle.x - x, 2) + Math.pow(circle.y - y, 2))\n    );\n  }, 0);\n}\n\nfunction cornersIsEq(c1, c2) {\n  return (\n    c1[0] === c2[0] &&\n    c1[1] === c2[1] &&\n    c1[2] === c2[2] &&\n    c1[3] === c2[3]\n  );\n}\n\nfunction cornersSign(cornersArr) {\n  return cornersByIndex(\n    square_types.findIndex(cornersIsEq.bind(null, cornersArr))\n  );\n}\n\nconst cornersMap = {\n  '0001': [[0, 0.5, 0.5, 1, 0, 1]],\n  '0010': [[1, 0.5, 0.5, 1, 1, 1]],\n  '0011': [[0, 0.5, 1, 0.5, 1, 1, 0, 1]],\n  '0100': [[0.5, 0, 1, 0.5, 1, 0]],\n  '0101': [[0, 0.5, 0.5, 0, 1, 0, 1, 0.5, 0.5, 1, 0, 1]],\n  '0110': [[0.5, 0, 0.5, 1, 1, 1, 1, 0]],\n  '0111': [[0, 0.5, 0.5, 0, 1, 0, 1, 1, 0, 1]],\n  '1000': [[0, 0.5, 0.5, 0, 0, 0]],\n  '1001': [[0.5, 0, 0.5, 1, 0, 1, 0, 0]],\n  '1010': [[0, 0.5, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 0, 0]],\n  '1011': [[0.5, 0, 1, 0.5, 1, 1, 0, 1, 0, 0]],\n  '1100': [[0, 0.5, 1, 0.5, 1, 0, 0, 0]],\n  '1101': [[0.5, 1, 1, 0.5, 1, 0, 0, 0, 0, 1]],\n  '1110': [[0, 0.5, 0.5, 1, 1, 1, 1, 0, 0, 0]],\n  '1111': [[0, 0, 1, 0, 1, 1, 0, 1]]\n};\nexport function getSquareLines(weights) {\n  const corners = cornersSign(weights.map(n => (n >= 1 ? 1 : 0)));\n  return cornersMap[corners];\n}\n","import {\n  calcCirclesWeight,\n  interpolateLines,\n  getSquareLines\n} from './metaballs';\n\nconst corners = [[0, 0], [1, 0], [1, 1], [0, 1]];\n\nexport function createMetaballsDrawer(circles, grid) {\n  const ballsCanvas = document.createElement('canvas');\n  const ballsCtx = ballsCanvas.getContext('2d');\n\n  function drawLines(i, j, lines) {\n    ballsCtx.strokeStyle = '#0f0';\n    lines.forEach(line => {\n      ballsCtx.beginPath();\n      ballsCtx.moveTo(\n        (i + line[0]) * grid.size,\n        (j + line[1]) * grid.size\n      );\n      for (let l = 2; l < line.length; l += 2) {\n        ballsCtx.lineTo(\n          (i + line[l]) * grid.size,\n          (j + line[l + 1]) * grid.size\n        );\n      }\n      ballsCtx.fill();\n    });\n  }\n\n  return (width, height) => {\n    ballsCanvas.width = width;\n    ballsCanvas.height = height;\n\n    ballsCtx.fillStyle = '#000';\n    const visited = [];\n    circles.forEach(circle => {\n      const padding = circle.radius * 4;\n      const fromI = Math.max(\n        0,\n        Math.floor((circle.x - padding) / grid.size)\n      );\n      const fromJ = Math.max(\n        0,\n        Math.floor((circle.y - padding) / grid.size)\n      );\n      const toI = Math.min(\n        grid.cols,\n        Math.floor((circle.x + padding) / grid.size)\n      );\n      const toJ = Math.min(\n        grid.cols,\n        Math.floor((circle.y + padding) / grid.size)\n      );\n\n      for (let i = fromI; i < toI; i += 1) {\n        for (let j = fromJ; j < toJ; j += 1) {\n          const index = j * grid.cols + i;\n          if (!visited[index]) {\n            const cornerWeights = corners.map(([cx, cy]) =>\n              calcCirclesWeight(\n                circles,\n                (cx + i) * grid.size,\n                (cy + j) * grid.size\n              )\n            );\n            const lines = getSquareLines(cornerWeights);\n            if (lines) {\n              drawLines(i, j, interpolateLines(lines, cornerWeights));\n            }\n\n            visited[index] = true;\n          }\n        }\n      }\n    });\n\n    return ballsCanvas;\n  };\n}\n","export function initGridUI(grid) {\n  const gridSizeInput = document.getElementById('gridSize');\n  const gridVisInput = document.getElementById('gridVisibility');\n  const gridSizeValue = document.getElementById('gridSizeValue');\n\n  grid.visible = gridVisInput.checked;\n  const updateGridSize = input => {\n    grid.size = Number(input.value);\n    gridSizeValue.innerText = `Grid: ${grid.size}px`;\n  };\n  updateGridSize(gridSizeInput);\n  gridSizeInput.addEventListener('input', e => {\n    updateGridSize(e.target);\n  });\n  gridVisInput.addEventListener('change', e => {\n    grid.visible = e.target.checked;\n  });\n}\n\nexport function drawGrid(ctx, grid) {\n  ctx.strokeStyle = '#555';\n  ctx.lineWidth = 0.1;\n  for (let i = 0; i < grid.cols; i += 1) {\n    for (let j = 0; j < grid.rows; j += 1) {\n      ctx.beginPath();\n      ctx.rect(i * grid.size, j * grid.size, grid.size, grid.size);\n      ctx.stroke();\n    }\n  }\n}\n","import { random } from '../common/utils';\n\nexport function orbitalUpdater(circles) {\n  circles.forEach((circle, i) => {\n    const t = Date.now() / 1000;\n    circle.oradius = circle.oradius || circle.radius;\n    circle.radius = circle.oradius + (i % 2 ? Math.sin : Math.cos)(t * 2) * 5;\n    circle.ox = circle.ox || circle.x;\n    circle.oy = circle.oy || circle.y;\n    circle.x = circle.ox + (Math.cos(t) * circle.radius * circle.vx) / 2;\n    circle.y =\n      circle.oy +\n      (Math.sin(t) * circle.radius * circle.vy) / 2 +\n      Math.cos(t) * 20;\n  });\n}\n\nexport const createCircles = (width, height) => [\n  {\n    color: [0, 255, 170],\n    radius: 50,\n    x: width / 2 + 30,\n    y: height / 2 - 30,\n    vx: random(-2, 2),\n    vy: random(-2, 2)\n  },\n  {\n    color: [0, 255, 170],\n    radius: 40,\n    x: width / 2 + 100,\n    y: height / 2 - 30,\n    vx: random(-5, 2),\n    vy: random(-2, 5)\n  },\n  {\n    color: [255, 255, 0],\n    radius: 75,\n    x: width / 2 + 40,\n    y: height / 2 + 40,\n    vx: random(-5, 2),\n    vy: random(-2, 5)\n  },\n  {\n    color: [255, 255, 0],\n    radius: 60,\n    x: width / 2,\n    y: height / 2,\n    vx: random(-2, 2),\n    vy: random(-2, 2)\n  }\n];\n","import runWithFPS from 'run-with-fps';\nimport { createGradientDrawer } from '../common/gradientDrawer';\nimport { createMetaballsDrawer } from '../common/metaballsDrawer';\nimport { initGridUI, drawGrid } from '../common/gridUI';\nimport { createCircles, orbitalUpdater } from './circles';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst canvas = document.getElementById('canvas');\ncanvas.width = width;\ncanvas.height = height;\nconst ctx = canvas.getContext('2d');\n\nconst circles = createCircles(width, height);\nconst grid = {\n  size: 1,\n  visible: false,\n  get cols() {\n    return width / this.size;\n  },\n  get rows() {\n    return height / this.size;\n  }\n};\n\ninitGridUI(grid);\nconst gradientDrawer = createGradientDrawer(circles);\nconst metaballsDrawer = createMetaballsDrawer(circles, grid);\n\nfunction draw() {\n  ctx.fillStyle = '#000';\n  canvas.width = width;\n\n  orbitalUpdater(circles);\n\n  ctx.drawImage(metaballsDrawer(width, height), 0, 0);\n  ctx.globalCompositeOperation = 'source-in';\n\n  ctx.drawImage(gradientDrawer(width, height), 0, 0);\n  ctx.globalCompositeOperation = 'source-over';\n\n  if (grid.visible) {\n    drawGrid(ctx, grid);\n  }\n}\n\nrunWithFPS(draw, 30);\n\nfunction drawCircles() {\n  circles.forEach(circle => {\n    ctx.strokeStyle = '#000';\n    ctx.beginPath();\n    ctx.arc(circle.x, circle.y, circle.radius, 0, 360);\n    ctx.stroke();\n  });\n}\n"]}