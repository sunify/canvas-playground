{"version":3,"sources":["node_modules/run-with-fps/index.js","metaballs/common/gradientDrawer.js","metaballs/common/utils.js","metaballs/common/metaballs.js","metaballs/common/metaballsDrawer.js","metaballs/common/gridUI.js","metaballs/spring/circles.js","metaballs/spring/index.js"],"names":["createGradientDrawer","circles","gradCanvas","document","createElement","gradCtx","getContext","width","height","forEach","circle","globalCompositeOperation","grad","createRadialGradient","x","y","radius","addColorStop","color","join","fillStyle","fillRect","random","a","b","Math","dist","x1","y1","hypot","distFast","x2","y2","min","abs","max","lerp","b_w","d_w","by","dy","cornersByIndex","i","toString","padStart","square_types","Array","from","_","n","split","map","Number","interpolateLines","lines","cornerWeights","line","length","calcCirclesWeight","reduce","sum","pow","cornersIsEq","c1","c2","cornersSign","cornersArr","findIndex","bind","cornersMap","getSquareLines","weights","corners","createMetaballsDrawer","grid","ballsCanvas","ballsCtx","visited","padding","fromI","floor","size","fromJ","toI","cols","toJ","j","index","cx","cy","drawLines","strokeStyle","beginPath","moveTo","l","lineTo","fill","initGridUI","gridSizeInput","getElementById","gridVisInput","gridSizeValue","visible","checked","updateGridSize","input","value","innerText","addEventListener","e","target","drawGrid","ctx","lineWidth","rows","rect","stroke","pulsarUpdater","t","Date","now","oradius","sin","cos","orbitalUpdater","vx","vy","base","ax","ay","createCircles","window","innerWidth","innerHeight","canvas","gradientDrawer","metaballsDrawer","springs","norm","vector","sqrt","diff","p1","p2","res","dot","v1","v2","push","points","v12","dir12","grav","draw","spring","restLength","cte","force1","force2","drawImage","drawCircles","arc"],"mappings":"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","file":"spring.1b55c0a3.map","sourceRoot":"..","sourcesContent":["module.exports = function runWithFPS (fn, fps) {\n  var interval = 1000 / fps;\n  var then = Date.now();\n  var stopped = false;\n\n  function run() {\n    if (!stopped) {\n      requestAnimationFrame(run);\n    }\n\n    var now = Date.now();\n    var delta = now - then;\n\n    if (delta > interval && !stopped) {\n      then = now - (delta % interval);\n      fn(now);\n    }\n  };\n\n  requestAnimationFrame(run);\n  fn(Date.now());\n\n  return function() {\n    stopped = true;\n  }\n};","export function createGradientDrawer(circles) {\n  const gradCanvas = document.createElement('canvas');\n  const gradCtx = gradCanvas.getContext('2d');\n\n  return (width, height) => {\n    gradCanvas.width = width;\n    gradCanvas.height = height;\n    circles.forEach(circle => {\n      gradCtx.globalCompositeOperation = 'source-over';\n      const grad = gradCtx.createRadialGradient(\n        circle.x,\n        circle.y,\n        circle.radius * 0,\n        circle.x,\n        circle.y,\n        circle.radius * 2.5\n      );\n      grad.addColorStop(0, `rgba(${circle.color.join(', ')}, 1)`);\n      grad.addColorStop(1, `rgba(${circle.color.join(', ')}, 0)`);\n      gradCtx.fillStyle = grad;\n      gradCtx.fillRect(\n        circle.x - circle.radius * 2.5,\n        circle.y - circle.radius * 2.5,\n        circle.radius * 5,\n        circle.radius * 5\n      );\n      gradCtx.fillRect(\n        circle.x - circle.radius * 2.5,\n        circle.y - circle.radius * 2.5,\n        circle.radius * 5,\n        circle.radius * 5\n      );\n    });\n\n    return gradCanvas;\n  };\n}\n","export function random(a, b) {\n  return (b - a) * Math.random() + a;\n}\n\nexport function dist(x, y, x1, y1) {\n  return Math.hypot(x - x1, y - y1);\n}\n\nexport function distFast(x1, y1, x2, y2) {\n  // Approximation by using octagons approach\n  const x = x2 - x1;\n  const y = y2 - y1;\n  return (\n    1.426776695 *\n    Math.min(\n      0.7071067812 * (Math.abs(x) + Math.abs(y)),\n      Math.max(Math.abs(x), Math.abs(y))\n    )\n  );\n}\n\n// Linear interpolation\nexport function lerp(b_w, d_w, by = 0, dy = 1) {\n  if (b_w === d_w) {\n    return null;\n  }\n\n  return by + ((dy - by) * (1 - b_w)) / (d_w - b_w);\n}\n","import { lerp } from './utils';\n\nexport const cornersByIndex = i =>\n  (i >>> 0).toString(2).padStart(4, '0');\nconst square_types = Array.from(new Array(16), (_, n) =>\n  cornersByIndex(n)\n    .split('')\n    .map(Number)\n);\n\nexport function interpolateLines(lines, cornerWeights) {\n  // return lines;\n  return lines.map(line => {\n    for (let i = 0; i < line.length; i += 2) {\n      const x = line[i];\n      const y = line[i + 1];\n\n      if ((x === 0 || x === 1) && (y === 0 || y === 1)) {\n        // it's corner\n        continue;\n      }\n\n      if (x === 0 || x === 1) {\n        line[i + 1] = lerp(\n          ...(x === 0\n            ? [cornerWeights[0], cornerWeights[3]]\n            : [cornerWeights[1], cornerWeights[2]])\n        );\n      }\n\n      if (y === 0 || y === 1) {\n        line[i] = lerp(\n          ...(y === 0\n            ? [cornerWeights[0], cornerWeights[1]]\n            : [cornerWeights[3], cornerWeights[2]])\n        );\n      }\n    }\n    return line;\n  });\n}\n\nexport function calcCirclesWeight(circles, x, y) {\n  return circles.reduce((sum, circle) => {\n    return (\n      sum +\n      Math.pow(circle.radius, 2) /\n        (Math.pow(circle.x - x, 2) + Math.pow(circle.y - y, 2))\n    );\n  }, 0);\n}\n\nfunction cornersIsEq(c1, c2) {\n  return (\n    c1[0] === c2[0] &&\n    c1[1] === c2[1] &&\n    c1[2] === c2[2] &&\n    c1[3] === c2[3]\n  );\n}\n\nfunction cornersSign(cornersArr) {\n  return cornersByIndex(\n    square_types.findIndex(cornersIsEq.bind(null, cornersArr))\n  );\n}\n\nconst cornersMap = {\n  '0001': [[0, 0.5, 0.5, 1, 0, 1]],\n  '0010': [[1, 0.5, 0.5, 1, 1, 1]],\n  '0011': [[0, 0.5, 1, 0.5, 1, 1, 0, 1]],\n  '0100': [[0.5, 0, 1, 0.5, 1, 0]],\n  '0101': [[0, 0.5, 0.5, 0, 1, 0, 1, 0.5, 0.5, 1, 0, 1]],\n  '0110': [[0.5, 0, 0.5, 1, 1, 1, 1, 0]],\n  '0111': [[0, 0.5, 0.5, 0, 1, 0, 1, 1, 0, 1]],\n  '1000': [[0, 0.5, 0.5, 0, 0, 0]],\n  '1001': [[0.5, 0, 0.5, 1, 0, 1, 0, 0]],\n  '1010': [[0, 0.5, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 0, 0]],\n  '1011': [[0.5, 0, 1, 0.5, 1, 1, 0, 1, 0, 0]],\n  '1100': [[0, 0.5, 1, 0.5, 1, 0, 0, 0]],\n  '1101': [[0.5, 1, 1, 0.5, 1, 0, 0, 0, 0, 1]],\n  '1110': [[0, 0.5, 0.5, 1, 1, 1, 1, 0, 0, 0]],\n  '1111': [[0, 0, 1, 0, 1, 1, 0, 1]]\n};\nexport function getSquareLines(weights) {\n  const corners = cornersSign(weights.map(n => (n >= 1 ? 1 : 0)));\n  return cornersMap[corners];\n}\n","import {\n  calcCirclesWeight,\n  interpolateLines,\n  getSquareLines\n} from './metaballs';\n\nconst corners = [[0, 0], [1, 0], [1, 1], [0, 1]];\n\nexport function createMetaballsDrawer(circles, grid) {\n  const ballsCanvas = document.createElement('canvas');\n  const ballsCtx = ballsCanvas.getContext('2d');\n\n  function drawLines(i, j, lines) {\n    ballsCtx.strokeStyle = '#0f0';\n    lines.forEach(line => {\n      ballsCtx.beginPath();\n      ballsCtx.moveTo(\n        (i + line[0]) * grid.size,\n        (j + line[1]) * grid.size\n      );\n      for (let l = 2; l < line.length; l += 2) {\n        ballsCtx.lineTo(\n          (i + line[l]) * grid.size,\n          (j + line[l + 1]) * grid.size\n        );\n      }\n      ballsCtx.fill();\n    });\n  }\n\n  return (width, height) => {\n    ballsCanvas.width = width;\n    ballsCanvas.height = height;\n\n    ballsCtx.fillStyle = '#000';\n    const visited = [];\n    circles.forEach(circle => {\n      const padding = circle.radius * 4;\n      const fromI = Math.max(\n        0,\n        Math.floor((circle.x - padding) / grid.size)\n      );\n      const fromJ = Math.max(\n        0,\n        Math.floor((circle.y - padding) / grid.size)\n      );\n      const toI = Math.min(\n        grid.cols,\n        Math.floor((circle.x + padding) / grid.size)\n      );\n      const toJ = Math.min(\n        grid.cols,\n        Math.floor((circle.y + padding) / grid.size)\n      );\n\n      for (let i = fromI; i < toI; i += 1) {\n        for (let j = fromJ; j < toJ; j += 1) {\n          const index = j * grid.cols + i;\n          if (!visited[index]) {\n            const cornerWeights = corners.map(([cx, cy]) =>\n              calcCirclesWeight(\n                circles,\n                (cx + i) * grid.size,\n                (cy + j) * grid.size\n              )\n            );\n            const lines = getSquareLines(cornerWeights);\n            if (lines) {\n              drawLines(i, j, interpolateLines(lines, cornerWeights));\n            }\n\n            visited[index] = true;\n          }\n        }\n      }\n    });\n\n    return ballsCanvas;\n  };\n}\n","export function initGridUI(grid) {\n  const gridSizeInput = document.getElementById('gridSize');\n  const gridVisInput = document.getElementById('gridVisibility');\n  const gridSizeValue = document.getElementById('gridSizeValue');\n\n  grid.visible = gridVisInput.checked;\n  const updateGridSize = input => {\n    grid.size = Number(input.value);\n    gridSizeValue.innerText = `Grid: ${grid.size}px`;\n  };\n  updateGridSize(gridSizeInput);\n  gridSizeInput.addEventListener('input', e => {\n    updateGridSize(e.target);\n  });\n  gridVisInput.addEventListener('change', e => {\n    grid.visible = e.target.checked;\n  });\n}\n\nexport function drawGrid(ctx, grid) {\n  ctx.strokeStyle = '#555';\n  ctx.lineWidth = 0.1;\n  for (let i = 0; i < grid.cols; i += 1) {\n    for (let j = 0; j < grid.rows; j += 1) {\n      ctx.beginPath();\n      ctx.rect(i * grid.size, j * grid.size, grid.size, grid.size);\n      ctx.stroke();\n    }\n  }\n}\n","import { random } from '../common/utils';\n\nexport function pulsarUpdater(circles) {\n  circles.forEach((circle, i) => {\n    const t = Date.now() / 1000;\n    circle.oradius = circle.oradius || circle.radius;\n    circle.radius = circle.oradius + (i % 2 ? Math.sin : Math.cos)(t * 2) * 5;\n  });\n}\n\nexport function orbitalUpdater(circles) {\n  circles.forEach((circle, i) => {\n    const t = Date.now() / 1000;\n    circle.x += (Math.cos(t) * circle.radius * circle.vx) / 200;\n    circle.y +=\n      (((Math.sin(t) * circle.radius) / 2 + Math.cos(t) * 20) * circle.vy) /\n      200;\n  });\n}\n\nconst base = {\n  ax: random(-1, 1) * 50,\n  ay: random(-1, 1) * 50\n};\n\nexport const createCircles = (width, height) => [\n  {\n    ...base,\n    color: [0, 255, 140],\n    radius: 40,\n    x: width / 2,\n    y: height / 2,\n    vx: 0,\n    vy: 0\n  },\n  {\n    ...base,\n    color: [0, 255, 170],\n    radius: 70,\n    x: width / 2,\n    y: height / 2,\n    vx: 0,\n    vy: 0\n  },\n  {\n    ...base,\n    color: [255, 255, 0],\n    radius: 60,\n    x: width / 2,\n    y: height / 2,\n    vx: 0,\n    vy: 0\n  },\n  {\n    ...base,\n    color: [0, 255, 140],\n    radius: 50,\n    x: width / 2,\n    y: height / 2,\n    vx: 0,\n    vy: 0\n  }\n  // {\n  //   ...base,\n  //   color: [255, 255, 0],\n  //   radius: 60,\n  //   x: width / 2,\n  //   y: height / 2,\n  //   vx: 0,\n  //   vy: 0\n  // },\n  // {\n  //   ...base,\n  //   color: [255, 255, 0],\n  //   radius: 60,\n  //   x: width / 2,\n  //   y: height / 2,\n  //   vx: 0,\n  //   vy: 0\n  // }\n];\n","import runWithFPS from 'run-with-fps';\nimport { createGradientDrawer } from '../common/gradientDrawer';\nimport { createMetaballsDrawer } from '../common/metaballsDrawer';\nimport { initGridUI, drawGrid } from '../common/gridUI';\nimport { random } from '../common/utils';\nimport { createCircles, pulsarUpdater } from './circles';\n\nconst width = window.innerWidth;\nconst height = window.innerHeight;\n\nconst canvas = document.getElementById('canvas');\ncanvas.width = width;\ncanvas.height = height;\nconst ctx = canvas.getContext('2d');\n\nconst circles = createCircles(width, height);\nconst grid = {\n  size: 1,\n  visible: false,\n  get cols() {\n    return width / this.size;\n  },\n  get rows() {\n    return height / this.size;\n  }\n};\n\ninitGridUI(grid);\nconst gradientDrawer = createGradientDrawer(circles);\nconst metaballsDrawer = createMetaballsDrawer(circles, grid);\n\nconst springs = [];\ncircles.forEach(c1 => {\n  circles.forEach(c2 => {\n    if (c1 !== c2) {\n      springs.push({\n        points: [c1, c2],\n        length: 0,\n        v12: [0, 0],\n        dir12: [0, 0]\n      });\n    }\n  });\n});\n\nfunction norm(vector) {\n  var sum = 0;\n  var i;\n  for (i in vector) sum += vector[i] * vector[i];\n  return Math.sqrt(sum);\n}\n\nfunction diff(p1, p2) {\n  var res = [];\n  var i = 0;\n  for (i = 0; i < p1.length; ++i) res[i] = p1[i] - p2[i];\n  return res;\n}\n\nfunction dot(v1, v2) {\n  var sum = 0;\n  var i;\n  for (i in v1) sum += v1[i] * v2[i];\n  return sum;\n}\n\nconst grav = {\n  x: width / 2,\n  y: height / 2,\n  vx: random(-10, 10),\n  vy: random(-10, 10)\n};\n\n// circles.forEach(c1 => {\n//   c1.ax = 0;\n//   c1.ay = 0;\n// });\nfunction draw() {\n  ctx.fillStyle = '#000';\n  canvas.width = width;\n\n  pulsarUpdater(circles);\n\n  springs.forEach(spring => {\n    const [c1, c2] = spring.points;\n    spring.v12 = [c2.x - c1.x, c2.y - c1.y];\n    spring.length = norm(spring.v12);\n    if (spring.length === 0) {\n      spring.v12 = [Math.random() / 10 - 0.05, Math.random() / 10 - 0.05];\n      spring.length = norm(spring.v12);\n    }\n    spring.dir12 = [\n      spring.v12[0] / spring.length,\n      spring.v12[1] / spring.length\n    ];\n\n    const { dir12 } = spring;\n    const springDamping = 0.2;\n    const springStiffness = 0.2;\n    const restLength = (c1.radius + c2.radius) / 1.2;\n    const cte =\n      springStiffness * (spring.length - restLength) -\n      springDamping * dot(diff([c1.vx, c1.vy], [c2.vx, c2.vy]), dir12);\n    var force1 = [cte * dir12[0], cte * dir12[1]];\n    var force2 = [-force1[0], -force1[1]];\n    c1.ax += force1[0] * 0.2;\n    c1.ay += force1[1] * 0.2;\n    c2.ax += force2[0] * 0.2;\n    c2.ay += force2[1] * 0.2;\n  });\n\n  let hasCollision = false;\n  circles.forEach((c1, i) => {\n    // const dx = grav.x - c1.x || 0.0001;\n    // const dy = grav.y - c1.y || 0.0001;\n    // const d = distFast(grav.x, grav.y, c1.x, c1.y);\n    // console.log(d);\n    // c1.ax += (dx / Math.pow(d, 2)) * 0.001;\n    // c1.ay += (dy / Math.pow(d, 2)) * 0.001;\n\n    // c1.radius = c1.or / c1.ax;\n    c1.vx += c1.ax * 0.3;\n    c1.vy += c1.ay * 0.3;\n    c1.vx *= 0.3;\n    c1.vy *= 0.3;\n    c1.x += c1.vx;\n    c1.y += c1.vy;\n\n    if (c1.x - c1.radius * 1.1 < 0) {\n      c1.x = c1.radius * 1.1;\n      c1.vy = 0;\n      c1.vx *= -1;\n      c1.ax *= -2;\n      hasCollision = [-1, 1];\n    }\n\n    if (c1.y - c1.radius * 1.1 < 0) {\n      c1.y = c1.radius * 1.1;\n      c1.vx = 0;\n      c1.vy *= -1;\n      c1.ay *= -2;\n      hasCollision = [1, -1];\n    }\n    if (c1.x + c1.radius * 1.1 > width) {\n      c1.x = width - c1.radius * 1.1;\n      c1.vy = 0;\n      c1.vx *= -1;\n      c1.ax *= -2;\n      hasCollision = [-1, 1];\n    }\n    if (c1.y + c1.radius * 1.1 > height) {\n      c1.y = height - c1.radius * 1.1;\n      c1.vy *= -1;\n      c1.vx = 0;\n      c1.ay *= -2;\n      hasCollision = [1, -1];\n    }\n  });\n\n  ctx.drawImage(metaballsDrawer(width, height), 0, 0);\n  ctx.globalCompositeOperation = 'source-in';\n\n  ctx.drawImage(gradientDrawer(width, height), 0, 0);\n  ctx.globalCompositeOperation = 'source-over';\n\n  // springs.forEach(spring => {\n  //   const [c1, c2] = spring.points;\n  //   ctx.beginPath();\n  //   ctx.moveTo(c1.x, c1.y);\n  //   ctx.lineTo(c2.x, c2.y);\n  //   ctx.stroke();\n  // });\n\n  // ctx.fillStyle = '#000';\n  // ctx.fillRect(grav.x - 2, grav.y - 2, 4, 4);\n\n  if (grid.visible) {\n    drawGrid(ctx, grid);\n  }\n}\n\nrunWithFPS(draw, 30);\n// draw(Date.now());\n\nfunction drawCircles() {\n  circles.forEach(circle => {\n    ctx.strokeStyle = '#000';\n    ctx.beginPath();\n    ctx.arc(circle.x, circle.y, circle.radius, 0, 360);\n    ctx.stroke();\n  });\n}\n"]}