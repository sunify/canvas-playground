{"version":3,"sources":["node_modules/run-with-fps/index.js","node_modules/eases/back-in-out.js","node_modules/eases/back-in.js","node_modules/eases/back-out.js","node_modules/eases/bounce-out.js","node_modules/eases/bounce-in-out.js","node_modules/eases/bounce-in.js","node_modules/eases/circ-in-out.js","node_modules/eases/circ-in.js","node_modules/eases/circ-out.js","node_modules/eases/cubic-in-out.js","node_modules/eases/cubic-in.js","node_modules/eases/cubic-out.js","node_modules/eases/elastic-in-out.js","node_modules/eases/elastic-in.js","node_modules/eases/elastic-out.js","node_modules/eases/expo-in-out.js","node_modules/eases/expo-in.js","node_modules/eases/expo-out.js","node_modules/eases/linear.js","node_modules/eases/quad-in-out.js","node_modules/eases/quad-in.js","node_modules/eases/quad-out.js","node_modules/eases/quart-in-out.js","node_modules/eases/quart-in.js","node_modules/eases/quart-out.js","node_modules/eases/quint-in-out.js","node_modules/eases/quint-in.js","node_modules/eases/quint-out.js","node_modules/eases/sine-in-out.js","node_modules/eases/sine-in.js","node_modules/eases/sine-out.js","node_modules/eases/index.js","node_modules/victor/index.js","node_modules/simplex-noise/simplex-noise.js","tentacles-forward/chain.js","tentacles-forward/index.js"],"names":["noise","SimplexNoise","Segment","pos","offset","angle","child","position","selfAngle","t","Math","random","dt","noise2D","PI","wiggle","start","end","Vector","copy","add","cos","sin","update","cur","length","canvas","document","getElementById","ctx","getContext","window","width","innerWidth","height","innerHeight","PIXEL_RATIO","segs","count","size","j","baseAngle","root","colorBase","seg","i","addChild","push","draw","forEach","k","h","eases","quartOut","s","elasticOut","l","linear","fillStyle","beginPath","arc","x","y","fill","stop","module","hot","dispose"],"mappings":"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","file":"tentacles-forward.06dfda0b.map","sourceRoot":"..","sourcesContent":["module.exports = function runWithFPS (fn, fps) {\n  var interval = 1000 / fps;\n  var then = Date.now();\n  var stopped = false;\n\n  function run() {\n    if (!stopped) {\n      requestAnimationFrame(run);\n    }\n\n    var now = Date.now();\n    var delta = now - then;\n\n    if (delta > interval && !stopped) {\n      then = now - (delta % interval);\n      fn(now);\n    }\n  };\n\n  requestAnimationFrame(run);\n  fn(Date.now());\n\n  return function() {\n    stopped = true;\n  }\n};","function backInOut(t) {\n  var s = 1.70158 * 1.525\n  if ((t *= 2) < 1)\n    return 0.5 * (t * t * ((s + 1) * t - s))\n  return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2)\n}\n\nmodule.exports = backInOut","function backIn(t) {\n  var s = 1.70158\n  return t * t * ((s + 1) * t - s)\n}\n\nmodule.exports = backIn","function backOut(t) {\n  var s = 1.70158\n  return --t * t * ((s + 1) * t + s) + 1\n}\n\nmodule.exports = backOut","function bounceOut(t) {\n  var a = 4.0 / 11.0\n  var b = 8.0 / 11.0\n  var c = 9.0 / 10.0\n\n  var ca = 4356.0 / 361.0\n  var cb = 35442.0 / 1805.0\n  var cc = 16061.0 / 1805.0\n\n  var t2 = t * t\n\n  return t < a\n    ? 7.5625 * t2\n    : t < b\n      ? 9.075 * t2 - 9.9 * t + 3.4\n      : t < c\n        ? ca * t2 - cb * t + cc\n        : 10.8 * t * t - 20.52 * t + 10.72\n}\n\nmodule.exports = bounceOut","var bounceOut = require('./bounce-out')\n\nfunction bounceInOut(t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5\n}\n\nmodule.exports = bounceInOut","var bounceOut = require('./bounce-out')\n\nfunction bounceIn(t) {\n  return 1.0 - bounceOut(1.0 - t)\n}\n\nmodule.exports = bounceIn","function circInOut(t) {\n  if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1)\n  return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1)\n}\n\nmodule.exports = circInOut","function circIn(t) {\n  return 1.0 - Math.sqrt(1.0 - t * t)\n}\n\nmodule.exports = circIn","function circOut(t) {\n  return Math.sqrt(1 - ( --t * t ))\n}\n\nmodule.exports = circOut","function cubicInOut(t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0\n}\n\nmodule.exports = cubicInOut","function cubicIn(t) {\n  return t * t * t\n}\n\nmodule.exports = cubicIn","function cubicOut(t) {\n  var f = t - 1.0\n  return f * f * f + 1.0\n}\n\nmodule.exports = cubicOut","function elasticInOut(t) {\n  return t < 0.5\n    ? 0.5 * Math.sin(+13.0 * Math.PI/2 * 2.0 * t) * Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n    : 0.5 * Math.sin(-13.0 * Math.PI/2 * ((2.0 * t - 1.0) + 1.0)) * Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0\n}\n\nmodule.exports = elasticInOut","function elasticIn(t) {\n  return Math.sin(13.0 * t * Math.PI/2) * Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nmodule.exports = elasticIn","function elasticOut(t) {\n  return Math.sin(-13.0 * (t + 1.0) * Math.PI/2) * Math.pow(2.0, -10.0 * t) + 1.0\n}\n\nmodule.exports = elasticOut","function expoInOut(t) {\n  return (t === 0.0 || t === 1.0)\n    ? t\n    : t < 0.5\n      ? +0.5 * Math.pow(2.0, (20.0 * t) - 10.0)\n      : -0.5 * Math.pow(2.0, 10.0 - (t * 20.0)) + 1.0\n}\n\nmodule.exports = expoInOut","function expoIn(t) {\n  return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nmodule.exports = expoIn","function expoOut(t) {\n  return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t)\n}\n\nmodule.exports = expoOut","function linear(t) {\n  return t\n}\n\nmodule.exports = linear","function quadInOut(t) {\n    t /= 0.5\n    if (t < 1) return 0.5*t*t\n    t--\n    return -0.5 * (t*(t-2) - 1)\n}\n\nmodule.exports = quadInOut","function quadIn(t) {\n  return t * t\n}\n\nmodule.exports = quadIn","function quadOut(t) {\n  return -t * (t - 2.0)\n}\n\nmodule.exports = quadOut","function quarticInOut(t) {\n  return t < 0.5\n    ? +8.0 * Math.pow(t, 4.0)\n    : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0\n}\n\nmodule.exports = quarticInOut","function quarticIn(t) {\n  return Math.pow(t, 4.0)\n}\n\nmodule.exports = quarticIn","function quarticOut(t) {\n  return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0\n}\n\nmodule.exports = quarticOut","function qinticInOut(t) {\n    if ( ( t *= 2 ) < 1 ) return 0.5 * t * t * t * t * t\n    return 0.5 * ( ( t -= 2 ) * t * t * t * t + 2 )\n}\n\nmodule.exports = qinticInOut","function qinticIn(t) {\n  return t * t * t * t * t\n}\n\nmodule.exports = qinticIn","function qinticOut(t) {\n  return --t * t * t * t * t + 1\n}\n\nmodule.exports = qinticOut","function sineInOut(t) {\n  return -0.5 * (Math.cos(Math.PI*t) - 1)\n}\n\nmodule.exports = sineInOut","function sineIn (t) {\n  var v = Math.cos(t * Math.PI * 0.5)\n  if (Math.abs(v) < 1e-14) return 1\n  else return 1 - v\n}\n\nmodule.exports = sineIn\n","function sineOut(t) {\n  return Math.sin(t * Math.PI/2)\n}\n\nmodule.exports = sineOut","module.exports = {\n\t'backInOut': require('./back-in-out'),\n\t'backIn': require('./back-in'),\n\t'backOut': require('./back-out'),\n\t'bounceInOut': require('./bounce-in-out'),\n\t'bounceIn': require('./bounce-in'),\n\t'bounceOut': require('./bounce-out'),\n\t'circInOut': require('./circ-in-out'),\n\t'circIn': require('./circ-in'),\n\t'circOut': require('./circ-out'),\n\t'cubicInOut': require('./cubic-in-out'),\n\t'cubicIn': require('./cubic-in'),\n\t'cubicOut': require('./cubic-out'),\n\t'elasticInOut': require('./elastic-in-out'),\n\t'elasticIn': require('./elastic-in'),\n\t'elasticOut': require('./elastic-out'),\n\t'expoInOut': require('./expo-in-out'),\n\t'expoIn': require('./expo-in'),\n\t'expoOut': require('./expo-out'),\n\t'linear': require('./linear'),\n\t'quadInOut': require('./quad-in-out'),\n\t'quadIn': require('./quad-in'),\n\t'quadOut': require('./quad-out'),\n\t'quartInOut': require('./quart-in-out'),\n\t'quartIn': require('./quart-in'),\n\t'quartOut': require('./quart-out'),\n\t'quintInOut': require('./quint-in-out'),\n\t'quintIn': require('./quint-in'),\n\t'quintOut': require('./quint-out'),\n\t'sineInOut': require('./sine-in-out'),\n\t'sineIn': require('./sine-in'),\n\t'sineOut': require('./sine-out')\n}","exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n\n Copyright (c) 2018 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n(function() {\n  'use strict';\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var F3 = 1.0 / 3.0;\n  var G3 = 1.0 / 6.0;\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\n  function SimplexNoise(randomOrSeed) {\n    var random;\n    if (typeof randomOrSeed == 'function') {\n      random = randomOrSeed;\n    }\n    else if (randomOrSeed) {\n      random = alea(randomOrSeed);\n    } else {\n      random = Math.random;\n    }\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (var i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n\n  }\n  SimplexNoise.prototype = {\n    grad3: new Float32Array([1, 1, 0,\n      -1, 1, 0,\n      1, -1, 0,\n\n      -1, -1, 0,\n      1, 0, 1,\n      -1, 0, 1,\n\n      1, 0, -1,\n      -1, 0, -1,\n      0, 1, 1,\n\n      0, -1, 1,\n      0, 1, -1,\n      0, -1, -1]),\n    grad4: new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n      0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n      1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n      -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n      1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n      -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n      1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n      -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]),\n    noise2D: function(xin, yin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0 = 0; // Noise contributions from the three corners\n      var n1 = 0;\n      var n2 = 0;\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin) * F2; // Hairy factor for 2D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var t = (i + j) * G2;\n      var X0 = i - t; // Unskew the cell origin back to (x,y) space\n      var Y0 = j - t;\n      var x0 = xin - X0; // The x,y distances from the cell origin\n      var y0 = yin - Y0;\n      // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      else {\n        i1 = 0;\n        j1 = 1;\n      } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n      var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n      var y1 = y0 - j1 + G2;\n      var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n      var y2 = y0 - 1.0 + 2.0 * G2;\n      // Work out the hashed gradient indices of the three simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      // Calculate the contribution from the three corners\n      var t0 = 0.5 - x0 * x0 - y0 * y0;\n      if (t0 >= 0) {\n        var gi0 = permMod12[ii + perm[jj]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n      }\n      var t1 = 0.5 - x1 * x1 - y1 * y1;\n      if (t1 >= 0) {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n      }\n      var t2 = 0.5 - x2 * x2 - y2 * y2;\n      if (t2 >= 0) {\n        var gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n      return 70.0 * (n0 + n1 + n2);\n    },\n    // 3D simplex noise\n    noise3D: function(xin, yin, zin) {\n      var permMod12 = this.permMod12;\n      var perm = this.perm;\n      var grad3 = this.grad3;\n      var n0, n1, n2, n3; // Noise contributions from the four corners\n      // Skew the input space to determine which simplex cell we're in\n      var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n      var i = Math.floor(xin + s);\n      var j = Math.floor(yin + s);\n      var k = Math.floor(zin + s);\n      var t = (i + j + k) * G3;\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var x0 = xin - X0; // The x,y,z distances from the cell origin\n      var y0 = yin - Y0;\n      var z0 = zin - Z0;\n      // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n      var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n      var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // X Y Z order\n        else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // X Z Y order\n        else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n      }\n      else { // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Z Y X order\n        else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1;\n        } // Y Z X order\n        else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n      }\n      // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n      var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n      var y1 = y0 - j1 + G3;\n      var z1 = z0 - k1 + G3;\n      var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n      var y2 = y0 - j2 + 2.0 * G3;\n      var z2 = z0 - k2 + 2.0 * G3;\n      var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n      var y3 = y0 - 1.0 + 3.0 * G3;\n      var z3 = z0 - 1.0 + 3.0 * G3;\n      // Work out the hashed gradient indices of the four simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      // Calculate the contribution from the four corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n      }\n      // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n      return 32.0 * (n0 + n1 + n2 + n3);\n    },\n    // 4D simplex noise, better simplex rank ordering method 2012-03-09\n    noise4D: function(x, y, z, w) {\n      var perm = this.perm;\n      var grad4 = this.grad4;\n\n      var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n      var s = (x + y + z + w) * F4; // Factor for 4D skewing\n      var i = Math.floor(x + s);\n      var j = Math.floor(y + s);\n      var k = Math.floor(z + s);\n      var l = Math.floor(w + s);\n      var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n      var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n      var Y0 = j - t;\n      var Z0 = k - t;\n      var W0 = l - t;\n      var x0 = x - X0; // The x,y,z,w distances from the cell origin\n      var y0 = y - Y0;\n      var z0 = z - Z0;\n      var w0 = w - W0;\n      // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // Six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to rank the numbers.\n      var rankx = 0;\n      var ranky = 0;\n      var rankz = 0;\n      var rankw = 0;\n      if (x0 > y0) rankx++;\n      else ranky++;\n      if (x0 > z0) rankx++;\n      else rankz++;\n      if (x0 > w0) rankx++;\n      else rankw++;\n      if (y0 > z0) ranky++;\n      else rankz++;\n      if (y0 > w0) ranky++;\n      else rankw++;\n      if (z0 > w0) rankz++;\n      else rankw++;\n      var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n      var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n      var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n      // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // Rank 3 denotes the largest coordinate.\n      i1 = rankx >= 3 ? 1 : 0;\n      j1 = ranky >= 3 ? 1 : 0;\n      k1 = rankz >= 3 ? 1 : 0;\n      l1 = rankw >= 3 ? 1 : 0;\n      // Rank 2 denotes the second largest coordinate.\n      i2 = rankx >= 2 ? 1 : 0;\n      j2 = ranky >= 2 ? 1 : 0;\n      k2 = rankz >= 2 ? 1 : 0;\n      l2 = rankw >= 2 ? 1 : 0;\n      // Rank 1 denotes the second smallest coordinate.\n      i3 = rankx >= 1 ? 1 : 0;\n      j3 = ranky >= 1 ? 1 : 0;\n      k3 = rankz >= 1 ? 1 : 0;\n      l3 = rankw >= 1 ? 1 : 0;\n      // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n      var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n      var y1 = y0 - j1 + G4;\n      var z1 = z0 - k1 + G4;\n      var w1 = w0 - l1 + G4;\n      var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n      var y2 = y0 - j2 + 2.0 * G4;\n      var z2 = z0 - k2 + 2.0 * G4;\n      var w2 = w0 - l2 + 2.0 * G4;\n      var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n      var y3 = y0 - j3 + 3.0 * G4;\n      var z3 = z0 - k3 + 3.0 * G4;\n      var w3 = w0 - l3 + 3.0 * G4;\n      var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n      var y4 = y0 - 1.0 + 4.0 * G4;\n      var z4 = z0 - 1.0 + 4.0 * G4;\n      var w4 = w0 - 1.0 + 4.0 * G4;\n      // Work out the hashed gradient indices of the five simplex corners\n      var ii = i & 255;\n      var jj = j & 255;\n      var kk = k & 255;\n      var ll = l & 255;\n      // Calculate the contribution from the five corners\n      var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n      if (t0 < 0) n0 = 0.0;\n      else {\n        var gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n        t0 *= t0;\n        n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n      }\n      var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n      if (t1 < 0) n1 = 0.0;\n      else {\n        var gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n        t1 *= t1;\n        n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n      }\n      var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n      if (t2 < 0) n2 = 0.0;\n      else {\n        var gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n        t2 *= t2;\n        n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n      }\n      var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n      if (t3 < 0) n3 = 0.0;\n      else {\n        var gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n        t3 *= t3;\n        n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n      }\n      var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n      if (t4 < 0) n4 = 0.0;\n      else {\n        var gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n        t4 *= t4;\n        n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n      }\n      // Sum up and scale the result to cover the range [-1,1]\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    }\n  };\n\n  function buildPermutationTable(random) {\n    var i;\n    var p = new Uint8Array(256);\n    for (i = 0; i < 256; i++) {\n      p[i] = i;\n    }\n    for (i = 0; i < 255; i++) {\n      var r = i + ~~(random() * (256 - i));\n      var aux = p[i];\n      p[i] = p[r];\n      p[r] = aux;\n    }\n    return p;\n  }\n  SimplexNoise._buildPermutationTable = buildPermutationTable;\n\n  function alea() {\n    // Johannes Baagøe <baagoe@baagoe.com>, 2010\n    var s0 = 0;\n    var s1 = 0;\n    var s2 = 0;\n    var c = 1;\n\n    var mash = masher();\n    s0 = mash(' ');\n    s1 = mash(' ');\n    s2 = mash(' ');\n\n    for (var i = 0; i < arguments.length; i++) {\n      s0 -= mash(arguments[i]);\n      if (s0 < 0) {\n        s0 += 1;\n      }\n      s1 -= mash(arguments[i]);\n      if (s1 < 0) {\n        s1 += 1;\n      }\n      s2 -= mash(arguments[i]);\n      if (s2 < 0) {\n        s2 += 1;\n      }\n    }\n    mash = null;\n    return function() {\n      var t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n      s0 = s1;\n      s1 = s2;\n      return s2 = t - (c = t | 0);\n    };\n  }\n  function masher() {\n    var n = 0xefc8249d;\n    return function(data) {\n      data = data.toString();\n      for (var i = 0; i < data.length; i++) {\n        n += data.charCodeAt(i);\n        var h = 0.02519603282416938 * n;\n        n = h >>> 0;\n        h -= n;\n        h *= n;\n        n = h >>> 0;\n        h -= n;\n        n += h * 0x100000000; // 2^32\n      }\n      return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n    };\n  }\n\n  // amd\n  if (typeof define !== 'undefined' && define.amd) define(function() {return SimplexNoise;});\n  // common js\n  if (typeof exports !== 'undefined') exports.SimplexNoise = SimplexNoise;\n  // browser\n  else if (typeof window !== 'undefined') window.SimplexNoise = SimplexNoise;\n  // nodejs\n  if (typeof module !== 'undefined') {\n    module.exports = SimplexNoise;\n  }\n\n})();\n","import Vector from 'victor';\nimport SimplexNoise from 'simplex-noise';\n\nconst noise = new SimplexNoise();\n\nexport class Segment {\n  constructor(pos, offset, angle, t = 0) {\n    this.child = null;\n    this.position = pos;\n    this.offset = offset;\n    this.angle = angle;\n    this.selfAngle = angle;\n    this.t = Math.random() * 1000;\n    this.dt = Math.random() * 0.01;\n  }\n\n  get length() {\n    let cur = this;\n    let length = 0;\n    while (cur) {\n      length += 1;\n      cur = cur.child;\n    }\n\n    return length;\n  }\n\n  addChild(child) {\n    this.child = child;\n\n    return child;\n  }\n\n  wiggle() {\n    this.t += this.dt;\n    // const min = -Math.PI / 2;\n    // const max = Math.PI / 2;\n    this.selfAngle = noise.noise2D(this.t, 200) % Math.PI;\n  }\n\n  update(position, angle) {\n    if (position) {\n      this.wiggle();\n      this.position = position;\n    }\n    this.angle = this.selfAngle + (angle || 0);\n    const start = this.position;\n    const end = new Vector()\n      .copy(start)\n      .add(\n        new Vector(\n          this.offset * Math.cos(this.angle),\n          this.offset * Math.sin(this.angle)\n        )\n      );\n\n    if (this.child) {\n      this.child.update(end, this.angle);\n    }\n  }\n}\n","import runWithFPS from 'run-with-fps';\nimport eases from 'eases';\nimport Vector from 'victor';\nimport { Segment } from './chain';\n\nconst canvas = document.getElementById('canvas');\nconst ctx = canvas.getContext('2d');\n\nconst { innerWidth: width, innerHeight: height } = window;\nconst PIXEL_RATIO = 2;\ncanvas.width = width * PIXEL_RATIO;\ncanvas.height = height * PIXEL_RATIO;\n\nconst segs = [];\nconst count = 8;\nconst size = 30;\nfor (let j = 0; j < count; j += 1) {\n  const baseAngle = ((Math.PI * 2) / count) * j;\n  const root = new Segment(\n    new Vector(\n      65 * Math.cos(baseAngle) + width / 2,\n      65 * Math.sin(baseAngle) + height / 2\n    ),\n    10,\n    baseAngle\n  );\n  root.colorBase = (360 / count) * j;\n  const seg = [root];\n  let cur = root;\n  for (let i = 0; i < size; i += 1) {\n    cur = cur.addChild(\n      new Segment(null, (1 - i / size) * 3, Math.PI / 2, Math.random() / 20)\n    );\n    seg.push(cur);\n  }\n  segs.push(seg);\n}\n\nconst draw = () => {\n  canvas.width = canvas.width;\n  segs.forEach(([root]) => {\n    root.colorBase += 5;\n    root.update();\n  });\n  for (let k = 0; k < size; k += 1) {\n    segs.forEach((seg, i) => {\n      const cur = seg[k];\n      const h = (seg[0].colorBase + eases.quartOut(k / size) * 60) % 360;\n      const s = 90 + 10 * eases.elasticOut(k / size);\n      const l =\n        (60 * (eases.elasticOut(k / size) + eases.linear(k / size))) / 2;\n      ctx.fillStyle = `hsl(${h}, ${s}%, ${l}%)`;\n      ctx.beginPath();\n      ctx.arc(\n        cur.position.x * PIXEL_RATIO,\n        cur.position.y * PIXEL_RATIO,\n        eases.linear(1 - k / size) * 50,\n        0,\n        Math.PI * 2\n      );\n      ctx.fill();\n    });\n  }\n};\nconst stop = runWithFPS(draw, 30);\n\n// Handle hot module replacement\nif (module.hot) {\n  module.hot.dispose(() => {\n    stop();\n  });\n}\n"]}