{"version":3,"sources":["node_modules/run-with-fps/index.js","node_modules/v-for-vector/dist/vector.js","node_modules/v-for-vector/dist/index.js","growth/setup.js","node_modules/lerp/index.js","node_modules/lerp-array/index.js","node_modules/rgb-hex/index.js","node_modules/hex-rgb/index.js","node_modules/@sunify/lerp-color/dist/utils.js","node_modules/@sunify/lerp-color/dist/index.js","growth/diffLine.js","node_modules/eases/back-in-out.js","node_modules/eases/back-in.js","node_modules/eases/back-out.js","node_modules/eases/bounce-out.js","node_modules/eases/bounce-in-out.js","node_modules/eases/bounce-in.js","node_modules/eases/circ-in-out.js","node_modules/eases/circ-in.js","node_modules/eases/circ-out.js","node_modules/eases/cubic-in-out.js","node_modules/eases/cubic-in.js","node_modules/eases/cubic-out.js","node_modules/eases/elastic-in-out.js","node_modules/eases/elastic-in.js","node_modules/eases/elastic-out.js","node_modules/eases/expo-in-out.js","node_modules/eases/expo-in.js","node_modules/eases/expo-out.js","node_modules/eases/linear.js","node_modules/eases/quad-in-out.js","node_modules/eases/quad-in.js","node_modules/eases/quad-out.js","node_modules/eases/quart-in-out.js","node_modules/eases/quart-in.js","node_modules/eases/quart-out.js","node_modules/eases/quint-in-out.js","node_modules/eases/quint-in.js","node_modules/eases/quint-out.js","node_modules/eases/sine-in-out.js","node_modules/eases/sine-in.js","node_modules/eases/sine-out.js","node_modules/eases/index.js","node_modules/vec2-copy/index.js","node_modules/chaikin-smooth/index.js","growth/drawLine.js","growth/index.js"],"names":["PIXEL_RATIO","ctx","document","createElement","getContext","dpr","window","devicePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","backingStorePixelRatio","width","innerWidth","height","innerHeight","canvas","getElementById","addEventListener","e","keyCode","ctrlKey","preventDefault","toBlob","blob","open","URL","createObjectURL","style","module","exports","red","green","blue","alpha","isPercent","toString","includes","res","match","map","Number","undefined","parseFloat","TypeError","Math","round","slice","hexChars","match3or4Hex","match6or8Hex","nonHexChars","RegExp","validHexSize","hex","options","test","replace","length","parseInt","substring","repeat","num","format","DiffLine","maxForce","maxSpeed","desiredSeparation","separationCohesionRation","maxEdgeLen","sq_desiredSeparation","nodes","node","push","index","splice","differentiate","growth","i","n1","n2","d","Vector","dist","position","indexOf","middleNode","clone","add","div","addNodeAt","Node","separationForces","getSeparationForces","cohesionForces","getEdgeCohesionForces","separation","cohesion","mult","applyForce","update","n","nodei","nodej","separateForces","nearNodes","zero","j","forceij","getSeparationForce","magnitude","sub","setMagnitude","velocity","limit","steer","dx","x","dy","y","sq_d","angle","atan2","polar","sqrt","sum","seek","random","force","target","colorsArr","shuffle","colors","lerp","a","floor","drawLine","line","progress","eases","expoIn","expoOut","backOut","strokeStyle","bounceInOut","min","lineWidth","path","beginPath","moveTo","lineTo","stroke","center","cartesian","START_LENGTH","MAX_LEN","padding","sin","PI","addNode","fillStyle","fillRect","draw","stop","shadowColor","shadowBlur","imageData","getImageData","data","putImageData","hot","dispose"],"mappings":";AAAA,OAAA,QAAA,SAAA,EAAA,GACA,IAAA,EAAA,IAAA,EACA,EAAA,KAAA,MACA,GAAA,EAmBA,OAHA,sBAdA,SAAA,IACA,GACA,sBAAA,GAGA,IAAA,EAAA,KAAA,MACA,EAAA,EAAA,EAEA,EAAA,IAAA,IACA,EAAA,EAAA,EAAA,EACA,EAAA,MAKA,EAAA,KAAA,OAEA,WACA,GAAA;;ACvBA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,WACA,SAAA,EAAA,EAAA,EAAA,GACA,GACA,KAAA,GAAA,EAAA,EAAA,EAAA,GACA,KAAA,GAAA,EAAA,EAAA,EAAA,KAGA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,KAAA,OAAA,KAAA,MACA,KAAA,WAAA,KAAA,WA4KA,OAzKA,EAAA,MAAA,SAAA,GACA,IAAA,EAAA,IAAA,EAAA,EAAA,GAGA,OAFA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA,GAEA,EAAA,OAAA,WACA,OAAA,EAAA,MAAA,EAAA,KAAA,GAAA,KAAA,SAAA,IAEA,EAAA,UAAA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,IAEA,EAAA,MAAA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,GAAA,IAEA,EAAA,KAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EACA,OAAA,KAAA,KAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,KAEA,EAAA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,KAAA,IAAA,IAEA,EAAA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,KAAA,IAAA,IAEA,EAAA,IAAA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,KAAA,WACA,OAAA,EAAA,UAAA,EAAA,IAEA,EAAA,UAAA,IAAA,SAAA,GASA,OARA,aAAA,GACA,KAAA,GAAA,EAAA,EACA,KAAA,GAAA,EAAA,IAGA,KAAA,GAAA,EACA,KAAA,GAAA,GAEA,MAEA,EAAA,UAAA,KAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,MAEA,EAAA,UAAA,IAAA,SAAA,GAOA,OANA,aAAA,EACA,KAAA,IAAA,EAAA,MAAA,GAAA,MAAA,IAGA,KAAA,KAAA,GAEA,MAEA,EAAA,UAAA,IAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EACA,KAAA,GAAA,EACA,MAEA,EAAA,UAAA,MAAA,WACA,OAAA,EAAA,MAAA,OAEA,EAAA,UAAA,SAAA,SAAA,GAGA,OAFA,KAAA,GAAA,EAAA,GACA,KAAA,GAAA,EAAA,GACA,MAEA,EAAA,UAAA,IAAA,SAAA,GACA,OAAA,EAAA,IAAA,KAAA,IAEA,EAAA,UAAA,MAAA,SAAA,GAEA,OADA,KAAA,UAAA,KAAA,IAAA,KAAA,UAAA,GACA,MAEA,EAAA,UAAA,UAAA,WAIA,OAHA,KAAA,UAAA,GACA,KAAA,IAAA,KAAA,WAEA,MAEA,OAAA,eAAA,EAAA,UAAA,IAAA,CACA,IAAA,WACA,OAAA,KAAA,IAEA,IAAA,SAAA,GACA,KAAA,KAAA,IAEA,YAAA,EACA,cAAA,IAEA,EAAA,UAAA,KAAA,SAAA,GAIA,OAHA,KAAA,GAAA,EACA,KAAA,gBAAA,EACA,KAAA,YAAA,EACA,MAEA,OAAA,eAAA,EAAA,UAAA,IAAA,CACA,IAAA,WACA,OAAA,KAAA,IAEA,IAAA,SAAA,GACA,KAAA,KAAA,IAEA,YAAA,EACA,cAAA,IAEA,EAAA,UAAA,KAAA,SAAA,GAIA,OAHA,KAAA,GAAA,EACA,KAAA,gBAAA,EACA,KAAA,YAAA,EACA,MAEA,EAAA,UAAA,aAAA,SAAA,EAAA,GAGA,OAFA,KAAA,KAAA,GACA,KAAA,KAAA,GACA,MAEA,OAAA,eAAA,EAAA,UAAA,QAAA,CACA,IAAA,WAGA,OAFA,KAAA,YACA,IAAA,KAAA,OAAA,KAAA,MAAA,KAAA,EAAA,KAAA,GAAA,KAAA,OACA,KAAA,QAEA,IAAA,SAAA,GACA,KAAA,SAAA,IAEA,YAAA,EACA,cAAA,IAEA,EAAA,UAAA,SAAA,SAAA,GACA,GAAA,KAAA,SAAA,EAAA,CACA,IAAA,EAAA,KAAA,UACA,KAAA,GAAA,EAAA,EAAA,EAAA,GACA,KAAA,GAAA,EAAA,EAAA,EAAA,GACA,KAAA,OAAA,EAEA,OAAA,MAEA,OAAA,eAAA,EAAA,UAAA,YAAA,CACA,IAAA,WAGA,OAFA,KAAA,gBACA,IAAA,KAAA,WAAA,EAAA,KAAA,MAAA,KAAA,WACA,KAAA,YAEA,IAAA,SAAA,GACA,KAAA,aAAA,IAEA,YAAA,EACA,cAAA,IAEA,EAAA,UAAA,aAAA,SAAA,GACA,GAAA,KAAA,aAAA,EAAA,CACA,IAAA,EAAA,KAAA,MACA,KAAA,GAAA,EAAA,EAAA,EAAA,GACA,KAAA,GAAA,EAAA,EAAA,EAAA,GACA,KAAA,WAAA,EAEA,OAAA,MAEA,EAAA,UAAA,SAAA,SAAA,EAAA,GAKA,OAJA,KAAA,GAAA,EAAA,EAAA,EAAA,GACA,KAAA,GAAA,EAAA,EAAA,EAAA,GACA,KAAA,OAAA,EACA,KAAA,WAAA,EACA,MAEA,EAtLA,GAwLA,QAAA,OAAA;;AC1LA,aACA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,QAAA,YACA,QAAA,OAAA,EAAA;;AC6BA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,IAAA,QAAA,OAAA,QAAA,OAAA,QAAA,MAAA,QAAA,iBAAA,EAhCO,IAAMA,EAAe,WACpBC,IAAAA,EAAMC,SAASC,cAAc,UAAUC,WAAW,MAUjDC,OATCC,OAAOC,kBAAoB,IAE/BN,EAAIO,8BACJP,EAAIQ,2BACJR,EAAIS,0BACJT,EAAIU,yBACJV,EAAIW,wBACJ,GATsB,GAgC5B,QAAA,YAAA,EAlB0DN,IAAAA,EAAAA,OAA/BO,EAAZC,EAAAA,WAAgCC,EAAbC,EAAAA,YAkBlC,QAAA,OAAA,EAAA,QAAA,MAAA,EAhBO,IAAMC,EAASf,SAASgB,eAAe,MAgB9C,QAAA,OAAA,EAfO,IAAMjB,EAAMgB,EAAOb,WAAW,MAerC,QAAA,IAAA,EAbAF,SAASiB,iBAAiB,QAAS,SAAAC,GACf,KAAdA,EAAEC,SAAkBD,EAAEE,UACxBF,EAAEG,iBAEFN,EAAOO,OAAO,SAAAC,GACZnB,OAAOoB,KAAKC,IAAIC,gBAAgBH,KAC/B,gBAIPR,EAAOJ,MAAQA,EAAQb,EACvBiB,EAAOF,OAASA,EAASf,EACzBiB,EAAOY,MAAMhB,MAAQA,EAAQ,KAC7BI,EAAOY,MAAMd,OAASA,EAAS;;AChC/B,SAAA,EAAA,EAAA,EAAA,GACA,OAAA,GAAA,EAAA,GAAA,EAAA,EAEA,OAAA,QAAA;;ACHA,IAAA,EAAA,QAAA,QAEA,OAAA,QAAA,SAAA,EAAA,EAAA,EAAA,GACA,GAAA,iBAAA,GACA,iBAAA,EACA,OAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,KAAA,IAAA,EAAA,OAAA,EAAA,QACA,EAAA,GAAA,IAAA,MAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,GAAA,GACA,OAAA;;ACXA,aAEAe,OAAOC,QAAU,EAACC,EAAKC,EAAOC,EAAMC,KAC7BC,MAAAA,GAAaJ,GAAOG,GAAS,KAAKE,WAAWC,SAAS,KAExD,GAAe,iBAARN,EAAkB,CACtBO,MAAAA,EAAMP,EAAIQ,MAAM,uBAAuBC,IAAIC,QAEjDV,EAAMO,EAAI,GACVN,EAAQM,EAAI,GACZL,EAAOK,EAAI,GACXJ,EAAQI,EAAI,aACQI,IAAVR,IACVA,EAAQS,WAAWT,IAGhB,GAAe,iBAARH,GACO,iBAAVC,GACS,iBAATC,GACPF,EAAM,KACNC,EAAQ,KACRC,EAAO,IACD,MAAA,IAAIW,UAAU,oCAGjB,GAAiB,iBAAVV,EAAoB,CAC1B,IAACC,GAAaD,GAAS,GAAKA,GAAS,EACxCA,EAAQW,KAAKC,MAAM,IAAMZ,OACnB,CAAA,KAAIC,GAAaD,GAAS,GAAKA,GAAS,KAGxC,MAAA,IAAIU,UAAmCV,yBAAAA,OAAAA,EAA7C,kCAFAA,EAAQW,KAAKC,MAAM,IAAMZ,EAAQ,KAIlCA,GAAiB,IAARA,GAAgBE,SAAS,IAAIW,MAAM,QAE5Cb,EAAQ,GAGF,OAAED,EAAOD,GAAS,EAAID,GAAO,GAAM,GAAK,IAAIK,SAAS,IAAIW,MAAM,GAAKb;;ACtC5E,aAEA,IAAMc,EAAW,SACXC,EAAqBD,MAAAA,OAAAA,EAAgBA,SAAAA,OAAAA,EAA3C,MACME,EAAqBF,MAAAA,OAAAA,EAAiBA,UAAAA,OAAAA,EAA5C,UAEMG,EAAc,IAAIC,OAAaJ,MAAAA,OAAAA,EAAa,KAAA,MAC5CK,EAAe,IAAID,OAAWH,IAAAA,OAAAA,EAAkBC,OAAAA,OAAAA,EAAiB,KAAA,KAEvErB,OAAOC,QAAU,SAAUwB,GAAKC,IAAAA,EAAU,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GACrC,GAAe,iBAARD,GAAoBH,EAAYK,KAAKF,KAASD,EAAaG,KAAKF,GACpE,MAAA,IAAIV,UAAU,+BAIjBV,IAAAA,EAAQ,IAEO,KAHnBoB,EAAMA,EAAIG,QAAQ,KAAM,KAGhBC,SACPxB,EAAQyB,SAASL,EAAIP,MAAM,EAAG,GAAI,IAAM,IACxCO,EAAMA,EAAIM,UAAU,EAAG,IAGL,IAAfN,EAAII,SACPxB,EAAQyB,SAASL,EAAIP,MAAM,EAAG,GAAGc,OAAO,GAAI,IAAM,IAClDP,EAAMA,EAAIM,UAAU,EAAG,IAGL,IAAfN,EAAII,SACPJ,EAAMA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,GAAKA,EAAI,IAGlDQ,IAAAA,EAAMH,SAASL,EAAK,IACpBvB,EAAM+B,GAAO,GACb9B,EAAS8B,GAAO,EAAK,IACrB7B,EAAa,IAAN6B,EAENP,MAAmB,UAAnBA,EAAQQ,OACd,CAAChC,EAAKC,EAAOC,EAAMC,GACnB,CAACH,IAAAA,EAAKC,MAAAA,EAAOC,KAAAA,EAAMC,MAAAA;;ACtCrB,aACA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GACA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,YACA,QAAA,cAAA,8CACA,QAAA,cAAA,qDACA,QAAA,eAAA,kFACA,QAAA,kBAAA,4DACA,QAAA,QAAA,SAAA,GACA,OAAA,QAAA,cAAA,KAAA,OAAA,KACA,QAAA,cAAA,KAAA,OAAA,KACA,QAAA,eAAA,KAAA,OAAA,KACA,QAAA,kBAAA,KAAA,OAAA,KAEA,QAAA,WAAA,SAAA,GACA,GAAA,QAAA,cAAA,KAAA,GAAA,CACA,IAAA,EAAA,EAAA,QAAA,EAAA,CAAA,OAAA,UAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,MAAA,CAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,GAGA,IAeA,EAhBA,GAAA,QAAA,cAAA,KAAA,KACA,EAAA,EAAA,MAAA,QAAA,gBAEA,OAAA,EACA,MAAA,EAAA,GACA,IAAA,QACA,OAAA,CAAA,IAGA,GAAA,QAAA,eAAA,KAAA,KACA,EAAA,EAAA,MAAA,QAAA,iBAEA,OAAA,EAAA,MAAA,EAAA,GAAA,IAAA,QAGA,GAAA,QAAA,kBAAA,KAAA,GAEA,OADA,EAAA,EAAA,MAAA,QAAA,oBAEA,EAAA,QAAA,EAAA,GAAA,CAAA,OAAA,UACA,MAAA,EAAA,GACA,OAAA,CAAA,OAAA,EAAA,MAEA,IAIA,QAAA,eAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,MAAA,EAAA,GAAA,IAAA,KAAA,OAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,OAAA,QAAA,cAAA,KAAA,GACA,IAAA,EACA,IAAA,EAAA,QAAA,EAAA,EAAA,GAEA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,GAEA,QAAA,cAAA,KAAA,IAAA,IAAA,EACA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAEA,QAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAEA,QAAA,QAAA,SAAA,GACA,GAAA,IAAA,EAAA,OACA,MAAA,CAAA,EAAA,EAAA,IAEA,IAAA,EAAA,EAAA,QAAA,GAAA,GACA,EAAA,EAAA,OAAA,EACA,EAAA,EAAA,EACA,EAAA,KAAA,IAAA,EAAA,EAAA,KAAA,MAAA,EAAA,IACA,MAAA,CAAA,GAAA,EAAA,EAAA,GAAA;;ACtEA,aACA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GACA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAEA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IACA,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,QAAA,WACA,EAAA,QAAA,WACA,QAAA,QAAA,EAAA,QACA,IAAA,EAAA,WAEA,IADA,IAAA,EAAA,GACA,EAAA,EAAA,EAAA,UAAA,OAAA,IACA,EAAA,GAAA,UAAA,GAEA,GAAA,iBAAA,EAAA,EAAA,OAAA,GAAA,CACA,IAAA,EAAA,EAAA,IAAA,EAAA,YACA,OAAA,SAAA,GACA,IAAA,EAAA,EAAA,QAAA,EAAA,OAAA,CAAA,KAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,IAAA,IAAA,GAAA,IAAA,KAAA,EAAA,kBAAA,KAAA,GACA,OAAA,EAEA,GAAA,IAAA,IAAA,EAAA,kBAAA,KAAA,GACA,OAAA,EAEA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,OAAA,GAAA,EACA,EAAA,eAAA,EAAA,QAAA,EAAA,EAAA,GAAA,QADA,GAOA,IAAA,EAAA,EAAA,QAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,IAAA,IAAA,GAAA,IAAA,KAAA,EAAA,kBAAA,KAAA,GACA,OAAA,EAEA,GAAA,IAAA,IAAA,EAAA,kBAAA,KAAA,GACA,OAAA,EAEA,IAAA,EAAA,EAAA,WAAA,GACA,EAAA,EAAA,WAAA,GACA,OAAA,GAAA,EACA,EAAA,eAAA,EAAA,QAAA,EAAA,EAAA,GAAA,QADA,GAMA,QAAA,QAAA;;ACwGG,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA,QAAA,cAAA,EA5JH,IAAA,EAAA,QAAA,gBA4JG,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA1JU8B,IAAAA,EA0JV,WAxJCC,SAAAA,EAAAA,EACAC,EACAC,EACAC,EACAC,GACA,EAAA,KAAA,GACKJ,KAAAA,SAAWA,EACXC,KAAAA,SAAWA,EACXC,KAAAA,kBAAoBA,EACpBG,KAAAA,qBAAuBH,KAAAA,IAAAA,EAAqB,GAC5CC,KAAAA,yBAA2BA,EAC3BC,KAAAA,WAAaA,EACbE,KAAAA,MAAQ,GA4Id,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,UAzIOC,MAAAA,SAAAA,GACDD,KAAAA,MAAME,KAAKD,KAwIjB,CAAA,IAAA,YArISA,MAAAA,SAAAA,EAAME,GACTH,KAAAA,MAAMI,OAAOD,EAAO,EAAGF,KAoI7B,CAAA,IAAA,SAjIQ,MAAA,WACFI,KAAAA,gBACAC,KAAAA,WA+HN,CAAA,IAAA,SA5HQ,MAAA,WACF,IAAA,IAAIC,EAAI,EAAGA,EAAI,KAAKP,MAAMb,OAAS,EAAGoB,GAAK,EAAG,CAC3CC,IAAAA,EAAK,KAAKR,MAAMO,GAChBE,EAAK,KAAKT,MAAMO,EAAI,GAEtBG,GADMC,EAAOC,OAAAA,KAAKJ,EAAGK,SAAUJ,EAAGI,UAC9B,KAAKf,WAAY,CAEjBK,IAAAA,EAAQ,KAAKH,MAAMc,QAAQL,GAC3BM,EAAaJ,EAAOK,OAAAA,MAAMR,EAAGK,UAChCI,IAAIR,EAAGI,UACPK,IAAI,GACFC,KAAAA,UACH,IAAIC,EAAKL,EAAY,KAAKrB,SAAU,KAAKC,UACzCQ,OA+GP,CAAA,IAAA,gBAzGe,MAAA,WAGT,IAFCkB,IAAAA,EAAmB,KAAKC,sBACxBC,EAAiB,KAAKC,wBACnBjB,EAAI,EAAGA,EAAI,KAAKP,MAAMb,OAAQoB,GAAK,EAAG,CACvCkB,IAAAA,EAAaJ,EAAiBd,GAC9BmB,EAAWH,EAAehB,GAChCkB,EAAWE,KAAK,KAAK9B,0BAChBG,KAAAA,MAAMO,GAAGqB,WAAWH,GACpBzB,KAAAA,MAAMO,GAAGqB,WAAWF,GACpB1B,KAAAA,MAAMO,GAAGsB,YAgGjB,CAAA,IAAA,sBA5FqB,MAAA,WAOf,IANCC,IAGFC,EACAC,EAJEF,EAAI,KAAK9B,MAAMb,OACf8C,EAAiB,GACjBC,EAAY,GAIT3B,EAAI,EAAGA,EAAIuB,EAAGvB,GAAK,EAC1B0B,EAAe/B,KAAKS,EAAOwB,OAAAA,QAGxB,IAAA,IAAI5B,EAAI,EAAGA,EAAIuB,EAAGvB,GAAK,EAAG,CAC7BwB,EAAQ,KAAK/B,MAAMO,GACd,IAAA,IAAI6B,EAAI7B,EAAI,EAAG6B,EAAIN,EAAGM,GAAK,EAAG,CACjCJ,EAAQ,KAAKhC,MAAMoC,GACbC,IAAAA,EAAU,KAAKC,mBAAmBP,EAAOC,GAC3CK,EAAQE,UAAY,IACtBN,EAAe1B,GAAGU,IAAIoB,GACtBJ,EAAeG,GAAGI,IAAIH,GACtBH,EAAU3B,IAAM2B,EAAU3B,IAAM,GAAK,EACrC2B,EAAUE,IAAMF,EAAUE,IAAM,GAAK,GAGrCF,EAAU3B,GAAK,GACjB0B,EAAe1B,GAAGW,IAAIgB,EAAU3B,IAE9B0B,EAAe1B,GAAGgC,UAAY,GAChCN,EAAe1B,GACZkC,aAAa,KAAK9C,UAClB6C,IAAI,KAAKxC,MAAMO,GAAGmC,UAClBC,MAAM,KAAKjD,UAGXuC,OAAAA,IA2DR,CAAA,IAAA,qBAxDkBzB,MAAAA,SAAAA,EAAIC,GACfmC,IAAAA,EAAQjC,EAAOwB,OAAAA,OACfU,EAAKrC,EAAGK,SAASiC,EAAIrC,EAAGI,SAASiC,EACjCC,EAAKvC,EAAGK,SAASmC,EAAIvC,EAAGI,SAASmC,EACjCC,EAAO,KAAAJ,IAAAA,EAAM,GAAIE,KAAAA,IAAAA,EAAM,GACzBE,GAAAA,EAAO,GAAKA,EAAO,KAAKlD,qBAAsB,CAC1CmD,IAAAA,EAAQ5E,KAAK6E,MAAMJ,EAAIF,GAC7BD,EAAM3B,IAAIN,EAAOyC,OAAAA,MAAMF,EAAO,EAAI5E,KAAK+E,KAAKJ,KAEvCL,OAAAA,IA+CR,CAAA,IAAA,wBA5CuB,MAAA,WAEjB,IADCrB,IAAAA,EAAiB,GACdhB,EAAI,EAAGA,EAAI,KAAKP,MAAMb,OAAQoB,IAAK,CACpC+C,IAAAA,EAAM3C,EAAOwB,OAAAA,OACT,IAAN5B,GAAWA,IAAM,KAAKP,MAAMb,OAAS,EACvCmE,EAAIrC,IAAI,KAAKjB,MAAMO,EAAI,GAAGM,UAAUI,IAAI,KAAKjB,MAAMO,EAAI,GAAGM,UAC3C,IAANN,EACT+C,EACGrC,IAAI,KAAKjB,MAAM,KAAKA,MAAMb,OAAS,GAAG0B,UACtCI,IAAI,KAAKjB,MAAMO,EAAI,GAAGM,UAChBN,IAAM,KAAKP,MAAMb,OAAS,GACnCmE,EAAIrC,IAAI,KAAKjB,MAAMO,EAAI,GAAGM,UAAUI,IAAI,KAAKjB,MAAM,GAAGa,UAExDyC,EAAIpC,IAAI,GACRK,EAAerB,KAAK,KAAKF,MAAMO,GAAGgD,KAAKD,IAElC/B,OAAAA,MA4BR,EAAA,GAAA,QAAA,SAAA,EAxBUH,IAAAA,EAwBV,WAvBWP,SAAAA,EAAAA,EAAUnB,EAAUC,GAAU,EAAA,KAAA,GACnCkB,KAAAA,SAAWA,EACXnB,KAAAA,SAAWA,EACXC,KAAAA,SAAWA,EACX+C,KAAAA,SAAW/B,EAAO6C,OAAAA,SAmBxB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,aAhBUC,MAAAA,SAAAA,GACJf,KAAAA,SAASzB,IAAIwC,KAenB,CAAA,IAAA,SAZQ,MAAA,WAEFf,KAAAA,SAASC,MAAM,KAAKhD,UACpBkB,KAAAA,SAASI,IAAI,KAAKyB,YASxB,CAAA,IAAA,OANIgB,MAAAA,SAAAA,GACI/C,OAAAA,EAAOK,OAAAA,MAAM0C,GACjBlB,IAAI,KAAK3B,UACT4B,aAAa,KAAK9C,UAClB6C,IAAI,KAAKE,UACTC,MAAM,KAAKjD,cACf,EAAA,GAAA,QAAA,KAAA;;AC5JH,SAAA,EAAA,GACA,IAAA,EAAA,UACA,OAAA,GAAA,GAAA,EACA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,GACA,KAAA,GAAA,GAAA,IAAA,EAAA,GAAA,EAAA,GAAA,GAGA,OAAA,QAAA;;ACPA,SAAA,EAAA,GACA,IAAA,EAAA,QACA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAGA,OAAA,QAAA;;ACLA,SAAA,EAAA,GACA,IAAA,EAAA,QACA,QAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAGA,OAAA,QAAA;;ACLA,SAAA,EAAA,GACA,IAQA,EAAA,EAAA,EAEA,OAAA,EAVA,EAAA,GAWA,OAAA,EACA,EAXA,EAAA,GAYA,MAAA,EAAA,IAAA,EAAA,IACA,EAZA,GAEA,KAAA,IAWA,EAVA,MAAA,KAUA,EATA,MAAA,KAUA,KAAA,EAAA,EAAA,MAAA,EAAA,MAGA,OAAA,QAAA;;ACpBA,IAAA,EAAA,QAAA,gBAEA,SAAA,EAAA,GACA,OAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,IACA,GAAA,EAAA,EAAA,EAAA,GAAA,GAGA,OAAA,QAAA;;ACRA,IAAA,EAAA,QAAA,gBAEA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,GAGA,OAAA,QAAA;;ACNA,SAAA,EAAA,GACA,OAAA,GAAA,GAAA,GAAA,IAAA,KAAA,KAAA,EAAA,EAAA,GAAA,GACA,IAAA,KAAA,KAAA,GAAA,GAAA,GAAA,GAAA,GAGA,OAAA,QAAA;;ACLA,SAAA,EAAA,GACA,OAAA,EAAA,KAAA,KAAA,EAAA,EAAA,GAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,KAAA,KAAA,KAAA,EAAA,GAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,EAAA,GACA,EAAA,EAAA,EAAA,EACA,GAAA,KAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAGA,OAAA,QAAA;;ACNA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,EACA,OAAA,EAAA,EAAA,EAAA,EAGA,OAAA,QAAA;;ACLA,SAAA,EAAA,GACA,OAAA,EAAA,GACA,GAAA,KAAA,IAAA,GAAA,KAAA,GAAA,EAAA,EAAA,GAAA,KAAA,IAAA,EAAA,IAAA,EAAA,EAAA,IACA,GAAA,KAAA,KAAA,GAAA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,KAAA,IAAA,GAAA,IAAA,EAAA,EAAA,IAAA,EAGA,OAAA,QAAA;;ACNA,SAAA,EAAA,GACA,OAAA,KAAA,IAAA,GAAA,EAAA,KAAA,GAAA,GAAA,KAAA,IAAA,EAAA,IAAA,EAAA,IAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,KAAA,KAAA,IAAA,EAAA,GAAA,KAAA,GAAA,GAAA,KAAA,IAAA,GAAA,GAAA,GAAA,EAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,IAAA,GAAA,IAAA,EACA,EACA,EAAA,GACA,GAAA,KAAA,IAAA,EAAA,GAAA,EAAA,KACA,GAAA,KAAA,IAAA,EAAA,GAAA,GAAA,GAAA,EAGA,OAAA,QAAA;;ACRA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,KAAA,IAAA,EAAA,IAAA,EAAA,IAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,IAAA,EAAA,EAAA,EAAA,KAAA,IAAA,GAAA,GAAA,GAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,EAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GAEA,OADA,GAAA,IACA,EAAA,GAAA,EAAA,GAEA,MADA,GACA,EAAA,GAAA,GAGA,OAAA,QAAA;;ACPA,SAAA,EAAA,GACA,OAAA,EAAA,EAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,GAAA,EAAA,GAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,EAAA,GACA,EAAA,KAAA,IAAA,EAAA,IACA,EAAA,KAAA,IAAA,EAAA,EAAA,GAAA,EAGA,OAAA,QAAA;;ACNA,SAAA,EAAA,GACA,OAAA,KAAA,IAAA,EAAA,GAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,KAAA,IAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,GAAA,GAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EACA,KAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,GAGA,OAAA,QAAA;;ACLA,SAAA,EAAA,GACA,OAAA,EAAA,EAAA,EAAA,EAAA,EAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,OAAA,IAAA,KAAA,IAAA,KAAA,GAAA,GAAA,GAGA,OAAA,QAAA;;ACJA,SAAA,EAAA,GACA,IAAA,EAAA,KAAA,IAAA,EAAA,KAAA,GAAA,IACA,OAAA,KAAA,IAAA,GAAA,MAAA,EACA,EAAA,EAGA,OAAA,QAAA;;ACNA,SAAA,EAAA,GACA,OAAA,KAAA,IAAA,EAAA,KAAA,GAAA,GAGA,OAAA,QAAA;;ACJA,OAAA,QAAA,CACA,UAAA,QAAA,iBACA,OAAA,QAAA,aACA,QAAA,QAAA,cACA,YAAA,QAAA,mBACA,SAAA,QAAA,eACA,UAAA,QAAA,gBACA,UAAA,QAAA,iBACA,OAAA,QAAA,aACA,QAAA,QAAA,cACA,WAAA,QAAA,kBACA,QAAA,QAAA,cACA,SAAA,QAAA,eACA,aAAA,QAAA,oBACA,UAAA,QAAA,gBACA,WAAA,QAAA,iBACA,UAAA,QAAA,iBACA,OAAA,QAAA,aACA,QAAA,QAAA,cACA,OAAA,QAAA,YACA,UAAA,QAAA,iBACA,OAAA,QAAA,aACA,QAAA,QAAA,cACA,WAAA,QAAA,kBACA,QAAA,QAAA,cACA,SAAA,QAAA,eACA,WAAA,QAAA,kBACA,QAAA,QAAA,cACA,SAAA,QAAA,eACA,UAAA,QAAA,iBACA,OAAA,QAAA,aACA,QAAA,QAAA;;AC/BA,OAAA,QAAA,SAAA,EAAA,GAGA,OAFA,EAAA,GAAA,EAAA,GACA,EAAA,GAAA,EAAA,GACA;;ACHA,IAAA,EAAA,QAAA,aAEA,OAAA,QAAA,SAAA,EAAA,GACA,MAAA,QAAA,KACA,EAAA,IAEA,EAAA,OAAA,GACA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,CACA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GAEA,EAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,GACA,EAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,GACA,EAAA,KAAA,GACA,EAAA,KAAA,GAIA,OAFA,EAAA,OAAA,GACA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,OAAA,KACA;;ACwBC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAAA,QAAA,YAAA,EA/CD,IAAA,EAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,mBACA,EAAA,QAAA,WA4CC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wDAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,GAAA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,IAAA,IAAA,EAAA,EAAA,EAAA,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,QAAA,EAAA,KAAA,EAAA,QAAA,GAAA,EAAA,SAAA,GAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GA1CD,IAAMiE,EAAYC,EAAQ,CACxB,UACA,UACA,UACA,UACA,YAGWC,EAASC,EAAQH,QAAAA,WAAAA,EAAAA,EAAAA,IAE9B,SAASC,EAAQG,GACX3B,IAAAA,EAAGU,EAAGvC,EACLA,IAAAA,EAAIwD,EAAE5E,OAAS,EAAGoB,EAAI,EAAGA,IAC5B6B,EAAI9D,KAAK0F,MAAM1F,KAAKkF,UAAYjD,EAAI,IACpCuC,EAAIiB,EAAExD,GACNwD,EAAExD,GAAKwD,EAAE3B,GACT2B,EAAE3B,GAAKU,EAEFiB,OAAAA,EAGF,SAASE,EAASxI,EAAKyI,EAAMC,GACnBC,EAAMC,QAAAA,OAAOF,GACZC,EAAME,QAAAA,QAAQH,GAEpBC,EAAMG,QAAAA,QAAQJ,GAExB1I,EAAI+I,YAAcX,EAAOO,EAAMK,QAAAA,YAAYnG,KAAKoG,IAAIP,EAAU,KAC9D1I,EAAIkJ,UAAY,GAAK,GAAK,EAAIR,GACxBS,IAAAA,GAAO,EACX,EAAA,UAAA,EAAOV,EAAAA,SAAAA,EAAKlE,MAAM/B,IAAI,SAAA6D,GAAK,MAAA,CAACA,EAAEjB,SAASiC,EAAGhB,EAAEjB,SAASmC,OAEvDvH,EAAIoJ,YACC,IAAA,IAAItE,EAAI,EAAGA,EAAIqE,EAAKzF,OAAQoB,GAAK,EAAG,CACxBqE,IAAAA,EAAAA,EAAAA,EAAKrE,GADmB,GAChCuC,EADgC,EAAA,GAC7BE,EAD6B,EAAA,GAE7B,IAANzC,EACF9E,EAAIqJ,OAAOhC,EAAItH,EAAf,YAA4BwH,EAAIxH,EAAhC,aAEAC,EAAIsJ,OAAOjC,EAAItH,EAAf,YAA4BwH,EAAIxH,EAAhC,aAGJC,EAAIuJ,SACL,QAAA,OAAA;;ACoDA,aAnGD,IAAA,EAAA,EAAA,QAAA,iBACA,EAAA,QAAA,gBACA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,uBACA,EAAA,QAAA,cACA,EAAA,QAAA,cA8FC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA5DD,IAhCA,IAAMd,EAAO,IAAIzE,EAAJ,SAAa,GAAK,EAAG,IAAK,KAAM,IACvCwF,EAAStE,EAAOuE,OAAAA,UAAU7I,EAAQ,MAAA,EAAGE,EAAS,OAAA,GAC9C4I,EAAe,GACfC,EAAU,IA6BP7E,EAAI,EAAGA,GAAK4E,EAAc5E,GAAK,EAAG,CACnC8E,IAAAA,EAAU,IACVvC,EAAIuC,GAAYhJ,EAAQgJ,MAAU,EAAVA,GAAeF,EAAgB5E,EACvDyC,EAAkC,IAA9B1E,KAAKgH,IAAK/E,EAAIjC,KAAKiH,GAAM,GAAWjH,KAAKkF,SACnDU,EAAKsB,QACH,IAAIpE,EAAJ,KAAST,EAAOuE,OAAAA,UAAUpC,EAAGE,EAAIiC,EAAOjC,GAAIkB,EAAKxE,SAAUwE,EAAKvE,WAepElE,EAAIgK,IAAAA,UAAY,OAChBhK,EAAIiK,IAAAA,SAAS,EAAG,EAAGjJ,EAAOJ,OAAAA,MAAOI,EAAOF,OAAAA,QACxC,IAAMoJ,EAAO,WAIPzB,GAFJA,EAAKrC,SAEDqC,EAAKlE,MAAMb,OAASiG,EAAS,CAC/BQ,IAEIC,EAAAA,IAAAA,aAAc,EAAU,EAAA,UAAA,EAAO,EAAA,QAAA,GAAI,OAAQ,IAC3CC,EAAAA,IAAAA,WAAa,KACRrK,EAAAA,EAAAA,UAAAA,EAAT,IAAcyI,EAAM,GAIf,IAFC6B,IAAAA,EAAYtK,EAAIuK,IAAAA,aAAa,EAAG,EAAGvJ,EAAOJ,OAAAA,MAAOI,EAAOF,OAAAA,QAErDuG,EAAI,EAAGA,EAAIrG,EAAOJ,OAAAA,MAAOyG,GAAK,EAChC,IAAA,IAAIE,EAAI,EAAGA,EAAIvG,EAAOF,OAAAA,OAAQyG,GAAK,EAAG,CACnCzC,IAAAA,EAA6B,GAAxByC,EAAIvG,EAAOJ,OAAAA,MAAQyG,GAC9BiD,EAAUE,KAAK1F,EAAI,IAA8B,IAAvB,GAAMjC,KAAKkF,UACrCuC,EAAUE,KAAK1F,EAAI,IAA8B,IAAvB,GAAMjC,KAAKkF,UACrCuC,EAAUE,KAAK1F,EAAI,IAA8B,IAAvB,GAAMjC,KAAKkF,UAIrC0C,EAAAA,IAAAA,aAAaH,EAAW,EAAG,QAEtBtK,EAAAA,EAAAA,UAAAA,EAAT,IAAcyI,EAAMA,EAAKlE,MAAMb,OAASiG,IAItCQ,GAAO,EAAWD,EAAAA,SAAAA,EAAM,IAG1BrI,OAAO6I,KACT7I,OAAO6I,IAAIC,QAAQ,WACbR,IACKvJ,EAAAA,OAAAA,MAAQI,EAAOJ,OAAAA,MACtBuJ","file":"growth.e32a3ff9.map","sourceRoot":"..","sourcesContent":["module.exports = function runWithFPS (fn, fps) {\n  var interval = 1000 / fps;\n  var then = Date.now();\n  var stopped = false;\n\n  function run() {\n    if (!stopped) {\n      requestAnimationFrame(run);\n    }\n\n    var now = Date.now();\n    var delta = now - then;\n\n    if (delta > interval && !stopped) {\n      then = now - (delta % interval);\n      fn(now);\n    }\n  };\n\n  requestAnimationFrame(run);\n  fn(Date.now());\n\n  return function() {\n    stopped = true;\n  }\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vector = /** @class */ (function () {\n    function Vector(xOrAngle, yOrMagnitude, polar) {\n        if (polar) {\n            this._x = Vector.x(xOrAngle, yOrMagnitude);\n            this._y = Vector.y(xOrAngle, yOrMagnitude);\n        }\n        else {\n            this._x = xOrAngle;\n            this._y = yOrMagnitude;\n            this._angle = this.angle;\n            this._magnitude = this.magnitude;\n        }\n    }\n    Vector.clone = function (v) {\n        var clone = new Vector(0, 0);\n        clone._x = v._x;\n        clone._y = v._y;\n        return clone;\n    };\n    Vector.random = function () {\n        return Vector.polar(Math.PI * 2 * Math.random(), 1);\n    };\n    Vector.cartesian = function (x, y) {\n        return new Vector(x, y);\n    };\n    Vector.polar = function (angle, magnitude) {\n        return new Vector(angle, magnitude, true);\n    };\n    Vector.dist = function (v1, v2) {\n        var v2x = v2 ? v2.x : 0;\n        var v2y = v2 ? v2.y : 0;\n        return Math.sqrt(Math.pow((v1.x - v2x), 2) + Math.pow((v1.y - v2y), 2));\n    };\n    Vector.x = function (angle, magnitude) {\n        return magnitude * Math.cos(angle);\n    };\n    Vector.y = function (angle, magnitude) {\n        return magnitude * Math.sin(angle);\n    };\n    Vector.dot = function (v1, v2) {\n        return v1.x * v1.y + v2.x * v2.y;\n    };\n    Vector.zero = function () {\n        return Vector.cartesian(0, 0);\n    };\n    Vector.prototype.add = function (b) {\n        if (b instanceof Vector) {\n            this.x += b.x;\n            this.y += b.y;\n        }\n        else {\n            this.x += b;\n            this.y += b;\n        }\n        return this;\n    };\n    Vector.prototype.mult = function (n) {\n        this.x *= n;\n        this.y *= n;\n        return this;\n    };\n    Vector.prototype.sub = function (b) {\n        if (b instanceof Vector) {\n            this.add(Vector.clone(b).mult(-1));\n        }\n        else {\n            this.add(-b);\n        }\n        return this;\n    };\n    Vector.prototype.div = function (n) {\n        this.x /= n;\n        this.y /= n;\n        return this;\n    };\n    Vector.prototype.clone = function () {\n        return Vector.clone(this);\n    };\n    Vector.prototype.copyFrom = function (v) {\n        this._x = v._x;\n        this._y = v._y;\n        return this;\n    };\n    Vector.prototype.dot = function (v) {\n        return Vector.dot(this, v);\n    };\n    Vector.prototype.limit = function (magnitude) {\n        this.magnitude = Math.min(this.magnitude, magnitude);\n        return this;\n    };\n    Vector.prototype.normalize = function () {\n        if (this.magnitude > 0) {\n            this.div(this.magnitude);\n        }\n        return this;\n    };\n    Object.defineProperty(Vector.prototype, \"x\", {\n        get: function () {\n            return this._x;\n        },\n        set: function (x) {\n            this.setX(x);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Vector.prototype.setX = function (x) {\n        this._x = x;\n        this._magnitude = undefined;\n        this._angle = undefined;\n        return this;\n    };\n    Object.defineProperty(Vector.prototype, \"y\", {\n        get: function () {\n            return this._y;\n        },\n        set: function (y) {\n            this.setY(y);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Vector.prototype.setY = function (y) {\n        this._y = y;\n        this._magnitude = undefined;\n        this._angle = undefined;\n        return this;\n    };\n    Vector.prototype.setCartesian = function (x, y) {\n        this.setX(x);\n        this.setY(y);\n        return this;\n    };\n    Object.defineProperty(Vector.prototype, \"angle\", {\n        get: function () {\n            this._angle =\n                this._angle === undefined ? Math.atan2(this.y, this.x) : this._angle;\n            return this._angle;\n        },\n        set: function (angle) {\n            this.setAngle(angle);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Vector.prototype.setAngle = function (angle) {\n        if (this._angle !== angle) {\n            var magnitude = this.magnitude;\n            this._x = Vector.x(angle, magnitude);\n            this._y = Vector.y(angle, magnitude);\n            this._angle = angle;\n        }\n        return this;\n    };\n    Object.defineProperty(Vector.prototype, \"magnitude\", {\n        get: function () {\n            this._magnitude =\n                this._magnitude === undefined ? Vector.dist(this) : this._magnitude;\n            return this._magnitude;\n        },\n        set: function (magnitude) {\n            this.setMagnitude(magnitude);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Vector.prototype.setMagnitude = function (magnitude) {\n        if (this._magnitude !== magnitude) {\n            var angle = this.angle;\n            this._x = Vector.x(angle, magnitude);\n            this._y = Vector.y(angle, magnitude);\n            this._magnitude = magnitude;\n        }\n        return this;\n    };\n    Vector.prototype.setPolar = function (angle, magnitude) {\n        this._x = Vector.x(angle, magnitude);\n        this._y = Vector.y(angle, magnitude);\n        this._angle = angle;\n        this._magnitude = magnitude;\n        return this;\n    };\n    return Vector;\n}());\nexports.Vector = Vector;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vector_1 = require(\"./vector\");\nexports.Vector = vector_1.Vector;\n","export const PIXEL_RATIO = (() => {\n  const ctx = document.createElement('canvas').getContext('2d'),\n    dpr = window.devicePixelRatio || 1,\n    bsr =\n      ctx.webkitBackingStorePixelRatio ||\n      ctx.mozBackingStorePixelRatio ||\n      ctx.msBackingStorePixelRatio ||\n      ctx.oBackingStorePixelRatio ||\n      ctx.backingStorePixelRatio ||\n      1;\n\n  return dpr / bsr;\n})();\n\nexport const { innerWidth: width, innerHeight: height } = window;\n\nexport const canvas = document.getElementById('bg');\nexport const ctx = canvas.getContext('2d');\n\ndocument.addEventListener('keyup', e => {\n  if (e.keyCode === 83 && e.ctrlKey) {\n    e.preventDefault();\n\n    canvas.toBlob(blob => {\n      window.open(URL.createObjectURL(blob));\n    }, 'image/png');\n  }\n});\n\ncanvas.width = width * PIXEL_RATIO;\ncanvas.height = height * PIXEL_RATIO;\ncanvas.style.width = width + 'px';\ncanvas.style.height = height + 'px';\n","function lerp(v0, v1, t) {\n    return v0*(1-t)+v1*t\n}\nmodule.exports = lerp","var lerp = require('lerp')\n\nmodule.exports = function lerpValues(value1, value2, t, out) {\n    if (typeof value1 === 'number'\n            && typeof value2 === 'number')\n        return lerp(value1, value2, t)\n    else { //assume array\n        var len = Math.min(value1.length, value2.length)\n        out = out||new Array(len)\n        for (var i=0; i<len; i++) \n            out[i] = lerp(value1[i], value2[i], t)\n        return out\n    }\n}","'use strict';\n/* eslint-disable no-mixed-operators */\nmodule.exports = (red, green, blue, alpha) => {\n\tconst isPercent = (red + (alpha || '')).toString().includes('%');\n\n\tif (typeof red === 'string') {\n\t\tconst res = red.match(/(0?\\.?\\d{1,3})%?\\b/g).map(Number);\n\t\t// TODO: use destructuring when targeting Node.js 6\n\t\tred = res[0];\n\t\tgreen = res[1];\n\t\tblue = res[2];\n\t\talpha = res[3];\n\t} else if (alpha !== undefined) {\n\t\talpha = parseFloat(alpha);\n\t}\n\n\tif (typeof red !== 'number' ||\n\t\ttypeof green !== 'number' ||\n\t\ttypeof blue !== 'number' ||\n\t\tred > 255 ||\n\t\tgreen > 255 ||\n\t\tblue > 255) {\n\t\tthrow new TypeError('Expected three numbers below 256');\n\t}\n\n\tif (typeof alpha === 'number') {\n\t\tif (!isPercent && alpha >= 0 && alpha <= 1) {\n\t\t\talpha = Math.round(255 * alpha);\n\t\t} else if (isPercent && alpha >= 0 && alpha <= 100) {\n\t\t\talpha = Math.round(255 * alpha / 100);\n\t\t} else {\n\t\t\tthrow new TypeError(`Expected alpha value (${alpha}) as a fraction or percentage`);\n\t\t}\n\t\talpha = (alpha | 1 << 8).toString(16).slice(1);\n\t} else {\n\t\talpha = '';\n\t}\n\n\treturn ((blue | green << 8 | red << 16) | 1 << 24).toString(16).slice(1) + alpha;\n};\n","'use strict';\n\nconst hexChars = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexChars}]{3}[${hexChars}]?`;\nconst match6or8Hex = `#?[${hexChars}]{6}([${hexChars}]{2})?`;\n\nconst nonHexChars = new RegExp(`[^#${hexChars}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nmodule.exports = function (hex, options = {}) {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alpha = 255;\n\n\tif (hex.length === 8) {\n\t\talpha = parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.substring(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talpha = parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.substring(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst num = parseInt(hex, 16);\n\tconst red = num >> 16;\n\tconst green = (num >> 8) & 255;\n\tconst blue = num & 255;\n\n\treturn options.format === 'array' ?\n\t\t[red, green, blue, alpha] :\n\t\t{red, green, blue, alpha};\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar rgb_hex_1 = __importDefault(require(\"rgb-hex\"));\nvar hex_rgb_1 = __importDefault(require(\"hex-rgb\"));\nexports.hexColorRegex = /^#(?=[0-9a-fA-F]*$)(?:.{3}|.{4}|.{6}|.{8})$/;\nexports.rgbColorRegex = /^rgb\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\)$/;\nexports.rgbaColorRegex = /^rgba\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d+(?:\\.\\d+)?|\\.\\d+)\\)$/;\nexports.rgbaHexColorRegex = /^rgba\\((#[0-9a-fA-F]{3,6})\\s*,\\s*(\\d+(?:\\.\\d+)?|\\.\\d+)\\)$/;\nexports.isColor = function (c) {\n    return exports.hexColorRegex.test(String(c)) ||\n        exports.rgbColorRegex.test(String(c)) ||\n        exports.rgbaColorRegex.test(String(c)) ||\n        exports.rgbaHexColorRegex.test(String(c));\n};\nexports.parseColor = function (color) {\n    if (exports.hexColorRegex.test(color)) {\n        var _a = hex_rgb_1.default(color, { format: 'array' }), r = _a[0], g = _a[1], b = _a[2], a = _a[3];\n        return [r, g, b, a === 255 ? 1 : a];\n    }\n    if (exports.rgbColorRegex.test(color)) {\n        var match = color.match(exports.rgbColorRegex);\n        if (match) {\n            return match\n                .slice(1, 4)\n                .map(Number)\n                .concat([1]);\n        }\n    }\n    if (exports.rgbaColorRegex.test(color)) {\n        var match = color.match(exports.rgbaColorRegex);\n        if (match) {\n            return match.slice(1, 5).map(Number);\n        }\n    }\n    if (exports.rgbaHexColorRegex.test(color)) {\n        var match = color.match(exports.rgbaHexColorRegex);\n        if (match) {\n            return hex_rgb_1.default(match[1], { format: 'array' })\n                .slice(0, 3)\n                .concat([Number(match[2])]);\n        }\n        return [];\n    }\n    return undefined;\n};\nexports.stringifyColor = function (color, target) {\n    var _a = color.slice(0, 3).map(Math.round), r = _a[0], g = _a[1], b = _a[2];\n    var a = color[3];\n    if (exports.hexColorRegex.test(target)) {\n        if (a === 1) {\n            return \"#\" + rgb_hex_1.default(r, g, b);\n        }\n        return \"#\" + rgb_hex_1.default(r, g, b, a);\n    }\n    if (exports.rgbColorRegex.test(target) && a === 1) {\n        return \"rgb(\" + r + \", \" + g + \", \" + b + \")\";\n    }\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n};\nexports.getStep = function (colors) {\n    if (colors.length === 3) {\n        return [0, colors[2]];\n    }\n    var time = colors.splice(-1)[0];\n    var steps = colors.length - 1;\n    var stepSize = 1 / steps;\n    var step = Math.min(steps - 1, Math.floor(time / stepSize));\n    return [step, (time - stepSize * step) / stepSize];\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar lerp_array_1 = __importDefault(require(\"lerp-array\"));\nvar utils_1 = require(\"./utils\");\nvar utils_2 = require(\"./utils\");\nexports.isColor = utils_2.isColor;\nvar lerpColor = function () {\n    var colors = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        colors[_i] = arguments[_i];\n    }\n    if (typeof colors[colors.length - 1] !== 'number') {\n        var parsedColors_1 = colors.map(utils_1.parseColor);\n        return function (t) {\n            var _a = utils_1.getStep(parsedColors_1.concat([t])), step = _a[0], time = _a[1];\n            var start = colors[step];\n            var end = colors[step + 1];\n            if ((time === 0 || start === end) && !utils_1.rgbaHexColorRegex.test(start)) {\n                return start;\n            }\n            if (time === 1 && !utils_1.rgbaHexColorRegex.test(end)) {\n                return end;\n            }\n            var startColor = parsedColors_1[step];\n            var endColor = parsedColors_1[step + 1];\n            if (startColor && endColor) {\n                return utils_1.stringifyColor(lerp_array_1.default(startColor, endColor, time), end);\n            }\n            return undefined;\n        };\n    }\n    else {\n        var _a = utils_1.getStep(colors), step = _a[0], time = _a[1];\n        var start = colors[step];\n        var end = colors[step + 1];\n        if ((time === 0 || start === end) && !utils_1.rgbaHexColorRegex.test(start)) {\n            return start;\n        }\n        if (time === 1 && !utils_1.rgbaHexColorRegex.test(end)) {\n            return end;\n        }\n        var startColor = utils_1.parseColor(start);\n        var endColor = utils_1.parseColor(end);\n        if (startColor && endColor) {\n            return utils_1.stringifyColor(lerp_array_1.default(startColor, endColor, time), end);\n        }\n    }\n    return undefined;\n};\nexports.default = lerpColor;\n","import { Vector } from 'v-for-vector';\n\nexport class DiffLine {\n  constructor(\n    maxForce,\n    maxSpeed,\n    desiredSeparation,\n    separationCohesionRation,\n    maxEdgeLen\n  ) {\n    this.maxForce = maxForce;\n    this.maxSpeed = maxSpeed;\n    this.desiredSeparation = desiredSeparation;\n    this.sq_desiredSeparation = desiredSeparation ** 2;\n    this.separationCohesionRation = separationCohesionRation;\n    this.maxEdgeLen = maxEdgeLen;\n    this.nodes = [];\n  }\n\n  addNode(node) {\n    this.nodes.push(node);\n  }\n\n  addNodeAt(node, index) {\n    this.nodes.splice(index, 0, node);\n  }\n\n  update() {\n    this.differentiate();\n    this.growth();\n  }\n\n  growth() {\n    for (let i = 0; i < this.nodes.length - 1; i += 1) {\n      const n1 = this.nodes[i];\n      const n2 = this.nodes[i + 1];\n      const d = Vector.dist(n1.position, n2.position);\n      if (d > this.maxEdgeLen) {\n        // Can add more rules for inserting nodes\n        const index = this.nodes.indexOf(n2);\n        const middleNode = Vector.clone(n1.position)\n          .add(n2.position)\n          .div(2);\n        this.addNodeAt(\n          new Node(middleNode, this.maxForce, this.maxSpeed),\n          index\n        );\n      }\n    }\n  }\n\n  differentiate() {\n    const separationForces = this.getSeparationForces();\n    const cohesionForces = this.getEdgeCohesionForces();\n    for (let i = 0; i < this.nodes.length; i += 1) {\n      const separation = separationForces[i];\n      const cohesion = cohesionForces[i];\n      separation.mult(this.separationCohesionRation);\n      this.nodes[i].applyForce(separation);\n      this.nodes[i].applyForce(cohesion);\n      this.nodes[i].update();\n    }\n  }\n\n  getSeparationForces() {\n    const n = this.nodes.length;\n    const separateForces = [];\n    const nearNodes = [];\n    let nodei;\n    let nodej;\n\n    for (let i = 0; i < n; i += 1) {\n      separateForces.push(Vector.zero());\n    }\n\n    for (let i = 0; i < n; i += 1) {\n      nodei = this.nodes[i];\n      for (let j = i + 1; j < n; j += 1) {\n        nodej = this.nodes[j];\n        const forceij = this.getSeparationForce(nodei, nodej);\n        if (forceij.magnitude > 0) {\n          separateForces[i].add(forceij);\n          separateForces[j].sub(forceij);\n          nearNodes[i] = (nearNodes[i] || 0) + 1;\n          nearNodes[j] = (nearNodes[j] || 0) + 1;\n        }\n      }\n      if (nearNodes[i] > 0) {\n        separateForces[i].div(nearNodes[i]);\n      }\n      if (separateForces[i].magnitude > 0) {\n        separateForces[i]\n          .setMagnitude(this.maxSpeed)\n          .sub(this.nodes[i].velocity)\n          .limit(this.maxForce);\n      }\n    }\n    return separateForces;\n  }\n\n  getSeparationForce(n1, n2) {\n    const steer = Vector.zero();\n    const dx = n1.position.x - n2.position.x;\n    const dy = n1.position.y - n2.position.y;\n    const sq_d = dx ** 2 + dy ** 2;\n    if (sq_d > 0 && sq_d < this.sq_desiredSeparation) {\n      const angle = Math.atan2(dy, dx);\n      steer.add(Vector.polar(angle, 1 / Math.sqrt(sq_d)));\n    }\n    return steer;\n  }\n\n  getEdgeCohesionForces() {\n    const cohesionForces = [];\n    for (let i = 0; i < this.nodes.length; i++) {\n      const sum = Vector.zero();\n      if (i !== 0 && i !== this.nodes.length - 1) {\n        sum.add(this.nodes[i - 1].position).add(this.nodes[i + 1].position);\n      } else if (i === 0) {\n        sum\n          .add(this.nodes[this.nodes.length - 1].position)\n          .add(this.nodes[i + 1].position);\n      } else if (i === this.nodes.length - 1) {\n        sum.add(this.nodes[i - 1].position).add(this.nodes[0].position);\n      }\n      sum.div(2);\n      cohesionForces.push(this.nodes[i].seek(sum));\n    }\n    return cohesionForces;\n  }\n}\n\nexport class Node {\n  constructor(position, maxForce, maxSpeed) {\n    this.position = position;\n    this.maxForce = maxForce;\n    this.maxSpeed = maxSpeed;\n    this.velocity = Vector.random();\n  }\n\n  applyForce(force) {\n    this.velocity.add(force);\n  }\n\n  update() {\n    // this.velocity.angle -= 0.2;\n    this.velocity.limit(this.maxSpeed);\n    this.position.add(this.velocity);\n  }\n\n  seek(target) {\n    return Vector.clone(target)\n      .sub(this.position)\n      .setMagnitude(this.maxSpeed)\n      .sub(this.velocity)\n      .limit(this.maxForce);\n  }\n}\n","function backInOut(t) {\n  var s = 1.70158 * 1.525\n  if ((t *= 2) < 1)\n    return 0.5 * (t * t * ((s + 1) * t - s))\n  return 0.5 * ((t -= 2) * t * ((s + 1) * t + s) + 2)\n}\n\nmodule.exports = backInOut","function backIn(t) {\n  var s = 1.70158\n  return t * t * ((s + 1) * t - s)\n}\n\nmodule.exports = backIn","function backOut(t) {\n  var s = 1.70158\n  return --t * t * ((s + 1) * t + s) + 1\n}\n\nmodule.exports = backOut","function bounceOut(t) {\n  var a = 4.0 / 11.0\n  var b = 8.0 / 11.0\n  var c = 9.0 / 10.0\n\n  var ca = 4356.0 / 361.0\n  var cb = 35442.0 / 1805.0\n  var cc = 16061.0 / 1805.0\n\n  var t2 = t * t\n\n  return t < a\n    ? 7.5625 * t2\n    : t < b\n      ? 9.075 * t2 - 9.9 * t + 3.4\n      : t < c\n        ? ca * t2 - cb * t + cc\n        : 10.8 * t * t - 20.52 * t + 10.72\n}\n\nmodule.exports = bounceOut","var bounceOut = require('./bounce-out')\n\nfunction bounceInOut(t) {\n  return t < 0.5\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5\n}\n\nmodule.exports = bounceInOut","var bounceOut = require('./bounce-out')\n\nfunction bounceIn(t) {\n  return 1.0 - bounceOut(1.0 - t)\n}\n\nmodule.exports = bounceIn","function circInOut(t) {\n  if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1)\n  return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1)\n}\n\nmodule.exports = circInOut","function circIn(t) {\n  return 1.0 - Math.sqrt(1.0 - t * t)\n}\n\nmodule.exports = circIn","function circOut(t) {\n  return Math.sqrt(1 - ( --t * t ))\n}\n\nmodule.exports = circOut","function cubicInOut(t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0\n}\n\nmodule.exports = cubicInOut","function cubicIn(t) {\n  return t * t * t\n}\n\nmodule.exports = cubicIn","function cubicOut(t) {\n  var f = t - 1.0\n  return f * f * f + 1.0\n}\n\nmodule.exports = cubicOut","function elasticInOut(t) {\n  return t < 0.5\n    ? 0.5 * Math.sin(+13.0 * Math.PI/2 * 2.0 * t) * Math.pow(2.0, 10.0 * (2.0 * t - 1.0))\n    : 0.5 * Math.sin(-13.0 * Math.PI/2 * ((2.0 * t - 1.0) + 1.0)) * Math.pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0\n}\n\nmodule.exports = elasticInOut","function elasticIn(t) {\n  return Math.sin(13.0 * t * Math.PI/2) * Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nmodule.exports = elasticIn","function elasticOut(t) {\n  return Math.sin(-13.0 * (t + 1.0) * Math.PI/2) * Math.pow(2.0, -10.0 * t) + 1.0\n}\n\nmodule.exports = elasticOut","function expoInOut(t) {\n  return (t === 0.0 || t === 1.0)\n    ? t\n    : t < 0.5\n      ? +0.5 * Math.pow(2.0, (20.0 * t) - 10.0)\n      : -0.5 * Math.pow(2.0, 10.0 - (t * 20.0)) + 1.0\n}\n\nmodule.exports = expoInOut","function expoIn(t) {\n  return t === 0.0 ? t : Math.pow(2.0, 10.0 * (t - 1.0))\n}\n\nmodule.exports = expoIn","function expoOut(t) {\n  return t === 1.0 ? t : 1.0 - Math.pow(2.0, -10.0 * t)\n}\n\nmodule.exports = expoOut","function linear(t) {\n  return t\n}\n\nmodule.exports = linear","function quadInOut(t) {\n    t /= 0.5\n    if (t < 1) return 0.5*t*t\n    t--\n    return -0.5 * (t*(t-2) - 1)\n}\n\nmodule.exports = quadInOut","function quadIn(t) {\n  return t * t\n}\n\nmodule.exports = quadIn","function quadOut(t) {\n  return -t * (t - 2.0)\n}\n\nmodule.exports = quadOut","function quarticInOut(t) {\n  return t < 0.5\n    ? +8.0 * Math.pow(t, 4.0)\n    : -8.0 * Math.pow(t - 1.0, 4.0) + 1.0\n}\n\nmodule.exports = quarticInOut","function quarticIn(t) {\n  return Math.pow(t, 4.0)\n}\n\nmodule.exports = quarticIn","function quarticOut(t) {\n  return Math.pow(t - 1.0, 3.0) * (1.0 - t) + 1.0\n}\n\nmodule.exports = quarticOut","function qinticInOut(t) {\n    if ( ( t *= 2 ) < 1 ) return 0.5 * t * t * t * t * t\n    return 0.5 * ( ( t -= 2 ) * t * t * t * t + 2 )\n}\n\nmodule.exports = qinticInOut","function qinticIn(t) {\n  return t * t * t * t * t\n}\n\nmodule.exports = qinticIn","function qinticOut(t) {\n  return --t * t * t * t * t + 1\n}\n\nmodule.exports = qinticOut","function sineInOut(t) {\n  return -0.5 * (Math.cos(Math.PI*t) - 1)\n}\n\nmodule.exports = sineInOut","function sineIn (t) {\n  var v = Math.cos(t * Math.PI * 0.5)\n  if (Math.abs(v) < 1e-14) return 1\n  else return 1 - v\n}\n\nmodule.exports = sineIn\n","function sineOut(t) {\n  return Math.sin(t * Math.PI/2)\n}\n\nmodule.exports = sineOut","module.exports = {\n\t'backInOut': require('./back-in-out'),\n\t'backIn': require('./back-in'),\n\t'backOut': require('./back-out'),\n\t'bounceInOut': require('./bounce-in-out'),\n\t'bounceIn': require('./bounce-in'),\n\t'bounceOut': require('./bounce-out'),\n\t'circInOut': require('./circ-in-out'),\n\t'circIn': require('./circ-in'),\n\t'circOut': require('./circ-out'),\n\t'cubicInOut': require('./cubic-in-out'),\n\t'cubicIn': require('./cubic-in'),\n\t'cubicOut': require('./cubic-out'),\n\t'elasticInOut': require('./elastic-in-out'),\n\t'elasticIn': require('./elastic-in'),\n\t'elasticOut': require('./elastic-out'),\n\t'expoInOut': require('./expo-in-out'),\n\t'expoIn': require('./expo-in'),\n\t'expoOut': require('./expo-out'),\n\t'linear': require('./linear'),\n\t'quadInOut': require('./quad-in-out'),\n\t'quadIn': require('./quad-in'),\n\t'quadOut': require('./quad-out'),\n\t'quartInOut': require('./quart-in-out'),\n\t'quartIn': require('./quart-in'),\n\t'quartOut': require('./quart-out'),\n\t'quintInOut': require('./quint-in-out'),\n\t'quintIn': require('./quint-in'),\n\t'quintOut': require('./quint-out'),\n\t'sineInOut': require('./sine-in-out'),\n\t'sineIn': require('./sine-in'),\n\t'sineOut': require('./sine-out')\n}","module.exports = function vec2Copy(out, a) {\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}","var copy = require('vec2-copy')\n\nmodule.exports = function(input, output) {\n    if (!Array.isArray(output))\n        output = []\n\n    if (input.length>0)\n        output.push(copy([0, 0], input[0]))\n    for (var i=0; i<input.length-1; i++) {\n        var p0 = input[i]\n        var p1 = input[i+1]\n        var p0x = p0[0],\n            p0y = p0[1],\n            p1x = p1[0],\n            p1y = p1[1]\n\n        var Q = [ 0.75 * p0x + 0.25 * p1x, 0.75 * p0y + 0.25 * p1y ]\n        var R = [ 0.25 * p0x + 0.75 * p1x, 0.25 * p0y + 0.75 * p1y ]\n        output.push(Q)\n        output.push(R)\n    }\n    if (input.length > 1)\n        output.push(copy([0, 0], input[ input.length-1 ]))\n    return output\n}","import eases from 'eases';\nimport lerp from '@sunify/lerp-color';\nimport smooth from 'chaikin-smooth';\nimport { PIXEL_RATIO } from './setup';\n\nconst colorsArr = shuffle([\n  '#d71259',\n  '#8e2d56',\n  '#208381',\n  '#eca639',\n  '#73d2de'\n]);\n\nexport const colors = lerp(...colorsArr);\n\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\nexport function drawLine(ctx, line, progress) {\n  const h = 20 * eases.expoIn(progress) + 150;\n  const s = 100 * eases.expoOut(progress);\n  const l = 40 * progress;\n  const a = eases.backOut(progress) - 0.4;\n  // ctx.strokeStyle = `hsla(${h}, ${s}%, ${l}%, ${a})`;\n  ctx.strokeStyle = colors(eases.bounceInOut(Math.min(progress, 1)));\n  ctx.lineWidth = 10 + 5 * (1 - progress);\n  const path = smooth(\n    smooth(line.nodes.map(n => [n.position.x, n.position.y]))\n  );\n  ctx.beginPath();\n  for (let i = 0; i < path.length; i += 1) {\n    const [x, y] = path[i];\n    if (i === 0) {\n      ctx.moveTo(x * PIXEL_RATIO, y * PIXEL_RATIO);\n    } else {\n      ctx.lineTo(x * PIXEL_RATIO, y * PIXEL_RATIO);\n    }\n  }\n  ctx.stroke();\n}\n","import runWithFps from 'run-with-fps';\nimport { Vector } from 'v-for-vector';\nimport { canvas, ctx, PIXEL_RATIO, width, height } from './setup';\nimport lerpColor from '@sunify/lerp-color';\nimport { DiffLine, Node } from './diffLine';\nimport { drawLine, colors } from './drawLine';\n\nconst line = new DiffLine(0.1, 1, 300, 1.05, 20);\nconst center = Vector.cartesian(width / 2, height / 2);\nconst START_LENGTH = 10;\nconst MAX_LEN = 150;\n\n// for (let i = 0; i <= START_LENGTH; i += 1) {\n//   const angle = ((Math.PI * 2) / START_LENGTH) * i;\n//   const r = 100;\n//   const x = Math.cos(angle) * r;\n//   const y = Math.sin(angle) * r;\n//   line.addNode(\n//     new Node(Vector.cartesian(x, y).add(center), line.maxForce, line.maxSpeed)\n//   );\n// }\n// for (let i = 0; i <= START_LENGTH; i += 1) {\n//   const angle = ((Math.PI * 2) / START_LENGTH) * i;\n//   const r = 100;\n//   const x = (16 * Math.sin(angle) ** 3 + 25) * 15 - 350;\n\n//   const y =\n//     (13 * Math.cos(angle) -\n//       5 * Math.cos(angle * 2) -\n//       2 * Math.cos(3 * angle) -\n//       Math.cos(4 * angle) +\n//       20) *\n//       -15 +\n//     300;\n//   line.addNode(\n//     new Node(Vector.cartesian(x, y).add(center), line.maxForce, line.maxSpeed)\n//   );\n// }\n\nfor (let i = 0; i <= START_LENGTH; i += 1) {\n  const padding = 600;\n  const x = padding + ((width - padding * 2) / START_LENGTH) * i;\n  const y = Math.sin((i * Math.PI) / 4) * 100 * Math.random();\n  line.addNode(\n    new Node(Vector.cartesian(x, y + center.y), line.maxForce, line.maxSpeed)\n  );\n}\n\n// line.addNode(\n//   new Node(Vector.cartesian(300, 500), line.maxForce, line.maxSpeed)\n// );\n// line.addNode(\n//   new Node(\n//     Vector.cartesian(width - 300, height - 500),\n//     line.maxForce,\n//     line.maxSpeed\n//   )\n// );\n\nctx.fillStyle = '#000';\nctx.fillRect(0, 0, canvas.width, canvas.height);\nconst draw = () => {\n  // canvas.width = canvas.width;\n  line.update();\n\n  if (line.nodes.length > MAX_LEN) {\n    stop();\n\n    ctx.shadowColor = lerpColor(colors(1), '#FFF', 0.5);\n    ctx.shadowBlur = 400;\n    drawLine(ctx, line, 1);\n\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n\n    for (let x = 0; x < canvas.width; x += 1) {\n      for (let y = 0; y < canvas.height; y += 1) {\n        const i = (y * canvas.width + x) * 4;\n        imageData.data[i + 0] += (0.5 - Math.random()) * 30;\n        imageData.data[i + 1] += (0.5 - Math.random()) * 30;\n        imageData.data[i + 2] += (0.5 - Math.random()) * 30;\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n  } else {\n    drawLine(ctx, line, line.nodes.length / MAX_LEN);\n  }\n};\n\nconst stop = runWithFps(draw, 60);\n\n// Handle hot module replacement\nif (module.hot) {\n  module.hot.dispose(() => {\n    if (stop) {\n      canvas.width = canvas.width;\n      stop();\n    }\n  });\n}\n"]}